<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ados</title>
  
  <subtitle>a fullstack game worker</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://adoontheway.github.io/"/>
  <updated>2023-09-18T05:07:54.443Z</updated>
  <id>https://adoontheway.github.io/</id>
  
  <author>
    <name>ado</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天进步一点点035 - assembleDebug太慢的问题调查</title>
    <link href="https://adoontheway.github.io/2023/09/18/everydayprogress0035/"/>
    <id>https://adoontheway.github.io/2023/09/18/everydayprogress0035/</id>
    <published>2023-09-18T04:08:01.000Z</published>
    <updated>2023-09-18T05:07:54.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在做flutter上的音频和视频方面的探索。<br>需要用到一些视屏区域截取，视屏导出成序列图等等。<br>这是昨天晚上到今天早上解决的一些问题的汇总，可能先后顺序之类的会记错；<br>此文目的用于提供一些解决问题的思路，聊以备忘，以使不忘，后事之师。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="设备问题"><a href="#设备问题" class="headerlink" title="设备问题"></a>设备问题</h2><p>个人设备过老或者缺失</p><h3 id="mac-pro-early-2015"><a href="#mac-pro-early-2015" class="headerlink" title="mac pro early 2015"></a><em>mac pro early 2015</em></h3><p>xcode不能更新，所以最新的flutter项目没法用 <em>macos</em> 来debug，且硬件所限，运行 <em>idea</em> 都发出拖拉机的声音，所以 <em>android emulator</em>也是卡成狗  </p><h3 id="2013年的组装电脑"><a href="#2013年的组装电脑" class="headerlink" title="2013年的组装电脑"></a>2013年的组装电脑</h3><p>windows电脑都这逼样，超过一定年限，哪怕资源管理器里面内存和cpu占用不高，按下 <em>win+e</em> 都能反应半天，最后还是选了在windows上通过<em>android studio<em>加</em>x86 emulator</em> 来排除一些环境问题</p><h3 id="唯一的安卓设备-mi-pad"><a href="#唯一的安卓设备-mi-pad" class="headerlink" title="唯一的安卓设备 mi pad"></a>唯一的安卓设备 <em>mi pad</em></h3><p>由于意气之下弄坏了</p><h2 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h2><p>使用的部分flutter包只支持 <em>iOS</em>, <em>android</em>, <em>macOS</em>。  </p><h2 id="Running-Gradle-task-‘assembleDebug’"><a href="#Running-Gradle-task-‘assembleDebug’" class="headerlink" title="Running Gradle task ‘assembleDebug’"></a>Running Gradle task ‘assembleDebug’</h2><h3 id="使用国内源加速maven与gradle"><a href="#使用国内源加速maven与gradle" class="headerlink" title="使用国内源加速maven与gradle"></a>使用国内源加速maven与gradle</h3><p>老是卡这里，开始以为是 <em>maven</em> 没有使用国内源加速的原因，<br>先后在以下文件中替换了 <em>gradle</em> 的国内源 </p><ul><li>{flutter_home}/package/flutter_tools/gradle/flutter.gradle</li><li>/app/build.gradle<br>然而没什么鸟用。</li></ul><h3 id="直接使用命令行来进行gradle编译"><a href="#直接使用命令行来进行gradle编译" class="headerlink" title="直接使用命令行来进行gradle编译"></a>直接使用命令行来进行gradle编译</h3><p>然后根据网上提示，进入到 <em>android</em> 目录下，先后运行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter clean</span><br><span class="line">./gradlew clean build</span><br></pre></td></tr></table></figure><p>这个时候就可以看到 <em>gradle</em> 真正的报错信息了.</p><blockquote><blockquote><blockquote><p>FAILURE: Build failed with an exception.</p></blockquote></blockquote></blockquote><p>Where:<br>Build file ‘F:\workspace\app\android\app\build.gradle’ line: 24</p><p>What went wrong:<br>A problem occurred evaluating project ‘:app’.</p><p>Failed to apply plugin ‘com.android.internal.application’.<br>Android Gradle plugin requires Java 11 to run. You are currently using Java 1.8.<br>Your current JDK is located in F:\Program Files\Java\jdk1.8.0_60\jre<br>You can try some of the following options:</p><ul><li>changing the IDE settings.</li><li>changing the JAVA_HOME environment variable.</li><li>changing org.gradle.java.home in gradle.properties.</li></ul><h3 id="java版本问题"><a href="#java版本问题" class="headerlink" title="java版本问题"></a>java版本问题</h3><p>好嘛，java版本问题，去oracle下载一个不就得了，于是下了个java 20。<br>多年未更新过java的我，渠道oracle下载java，居然要登陆！！！！！<br>更新完成，继续运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\gradlew --status</span><br></pre></td></tr></table></figure><p>1个idle的,6个 stopped，没有问题,继续：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean build</span><br></pre></td></tr></table></figure><p>发现java 20也不行！友邦惊诧！！！<br>好嘛，写在java 20，我就给你装个java 11。<br>安装完java 11，尼玛，明明系统环境变量 <strong>$JAVA_HOME$</strong> 设置的就是新安装的 java 11的jdk根目录，缺还是去之前安装的java 20的目录下去找了！！！<br>为也是服了，在 <em>gradlew.bat</em> 中也打了日志，就是莫名其妙的在java 11的jdk目录下的bin中找不到java 执行文件！！！<br>网上说，java 20卸载不干净会有残留文件无法删除，导致此问题。<br>确认了一下，确实在之前的java 20目录下有残留文件，立即 <strong>shift + DEL</strong>， 妈蛋，文件使用中。<br>折腾之下还是重启电脑之后删除掉了。<br>此事运行运行 <em>clean</em>， 会有什么有趣的事情发生呢？</p><h3 id="javaHome-invalid问题"><a href="#javaHome-invalid问题" class="headerlink" title="javaHome invalid问题"></a>javaHome invalid问题</h3><blockquote><p>The supplied javaHome seems to be invalid.<br>于是，修改了 <em>gradle.property</em>:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.java.home&#x3D;f:\\Programe Files\\Java\\jdk-11</span><br></pre></td></tr></table></figure><p>此时，项目的源码可以编译通过，但是</p><h3 id="Unsuppoted-class-file-major-version-64"><a href="#Unsuppoted-class-file-major-version-64" class="headerlink" title="Unsuppoted class file major version 64"></a>Unsuppoted class file major version 64</h3><ul><li>首先，在build.gradle中，将最小版本调整为插件需要的最小版本</li><li>其次，此插件只能运行与移动平台与mac上，可以使用模拟器debug一下</li></ul><p>事实证明，模拟器中可以运行起来，无报错。</p><p>至此，以及可以完美的运行起来了，可以往项目中加屎了。</p><h2 id="资源服务器的问题"><a href="#资源服务器的问题" class="headerlink" title="资源服务器的问题"></a>资源服务器的问题</h2><p>app需要用到一些资源，于是打算在wsl装的ubuntu上搞一个http服务器专门用来提供资源管理。<br>用golang/gin写了一个简单的http静态资源服务器，打包linux:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set GOOS&#x3D;linux</span><br><span class="line">set GOARCH&#x3D;amd64</span><br><span class="line">go build</span><br></pre></td></tr></table></figure><p>好了，在 ubuntu 上执行 <code>explore.exe .</code> 之后，将刚才生成的可执行文件拉进来， 直接运行，完美；<br>使用 <code>nohup</code> 运行，卡在了命令行，于是，想起来我这台2013年的拖拉机确实无法承受如此重任，于是想到了上周从垃圾堆里翻出来的树莓派 3 B+;<br>重新将执行文件上传到树莓派:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /Users/duke/Downloads/reserver pi@192.168.3.25:/home/pi/res</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 ./reserver</span><br></pre></td></tr></table></figure><p>然后运行</p><blockquote><p>cannot execute binary file: Exec format error<br>难道是我的树莓派是32bit的？不应该啊，之前确认过是64bit的。<br>然后调查了一下，突然想起树莓派是arm架构的，于是</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> GOOS=linux</span><br><span class="line"><span class="built_in">set</span> GOARCH=arm64</span><br><span class="line"><span class="built_in">set</span> CGO_ENABLED=0</span><br><span class="line">go build -o reserver.out ./release/raspberry/reserver.out </span><br></pre></td></tr></table></figure><p>然后，将此文件上传至树莓派，完美运行.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><ul><li>目前 flutter 只支持 java 11，官网下载java要登陆，国内其实有免登陆的下载源；  </li><li>无法忍受android项目 assembleDebug 太慢，可以自己手动调试一下；</li><li>gradle最后debug插件遇到问题很有可能其实是本地平台的问题，</li></ul>]]></content>
    
    <summary type="html">
    
      flutter遇到assembleDebug太慢的问题以及其他一些问题的调查
    
    </summary>
    
    
      <category term="linux" scheme="https://adoontheway.github.io/tags/linux/"/>
    
      <category term="go" scheme="https://adoontheway.github.io/tags/go/"/>
    
      <category term="树莓派" scheme="https://adoontheway.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="raspberry pi" scheme="https://adoontheway.github.io/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点034 - tensorflow 在arm架构上的使用</title>
    <link href="https://adoontheway.github.io/2023/09/12/everydayprogress034/"/>
    <id>https://adoontheway.github.io/2023/09/12/everydayprogress034/</id>
    <published>2023-09-12T04:26:47.000Z</published>
    <updated>2023-09-18T05:07:54.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近快要穷死了，所以去论坛上要饭，然后有个有个老板想要在移动设备上使用<em>tensorflow</em>模型，所以试试看。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://tensorflow.google.cn/lite/guide/signatures?hl=zh-cn">tensorflow lite</a></li></ul>]]></content>
    
    <summary type="html">
    
      调查一下tensorflow在移动设备上的使用
    
    </summary>
    
    
      <category term="python" scheme="https://adoontheway.github.io/tags/python/"/>
    
      <category term="tensorflow" scheme="https://adoontheway.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点032 - Next.js学习</title>
    <link href="https://adoontheway.github.io/2023/05/17/everydayprogress032/"/>
    <id>https://adoontheway.github.io/2023/05/17/everydayprogress032/</id>
    <published>2023-05-17T02:25:06.000Z</published>
    <updated>2023-05-17T05:36:41.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>被迫向生活妥协，哪有什么鬼的生活与远方，能找到工作就不错了，操蛋的人生。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><p>不用国内的文档，问题太多了。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure><p>之后 <code>npm run dev</code> 就可以看到效果。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;next dev&quot;,//应用以开发模式启动</span><br><span class="line">    &quot;build&quot;: &quot;next build&quot;,//应用打包生产环境</span><br><span class="line">    &quot;start&quot;: &quot;next start&quot;,//启动一个生产环境服务器</span><br><span class="line">    &quot;lint&quot;: &quot;next lint&quot;//设置NextJs内置的ESLint配置</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="新建项目的一些说明"><a href="#新建项目的一些说明" class="headerlink" title="新建项目的一些说明"></a>新建项目的一些说明</h3><ul><li>app/page.tsx : 类似主页</li><li>app/layout.tsx : 所有页面的根容器，这个页面没有写的话，会在 <code>npm run dev</code> 的时候自动生成</li><li>public : 这里用于存放静态资源的，如，图片，字体等。 在代码中可以直接以 <code>/</code> 前缀访问</li></ul><h2 id="一些原则"><a href="#一些原则" class="headerlink" title="一些原则"></a>一些原则</h2><h3 id="服务端组件与客户端组件之间的传值"><a href="#服务端组件与客户端组件之间的传值" class="headerlink" title="服务端组件与客户端组件之间的传值"></a>服务端组件与客户端组件之间的传值</h3><p>服务端组件与客户端组件之间的值传递需要序列化。也就是函数，日期这样的对象不能直接传给客户端组件。</p><h3 id="仅限服务端的代码不要和客户端组件混到一起，这个是很致命的"><a href="#仅限服务端的代码不要和客户端组件混到一起，这个是很致命的" class="headerlink" title="仅限服务端的代码不要和客户端组件混到一起，这个是很致命的"></a>仅限服务端的代码不要和客户端组件混到一起，这个是很致命的</h3><p>可以使用 <em>server-only</em> 包给开发者报错。 <code>cnpm i server-only</code>，然后到仅限服务端的代码中导入即可。</p><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p>虽然客户端组件也可以获取数据，建议是通过服务端组件获取数据，除非特殊原因。服务端组件获取数据更快更方便。</p><h3 id="第三方组件"><a href="#第三方组件" class="headerlink" title="第三方组件"></a>第三方组件</h3><p>服务端组件是一个新的概念，所以生态系统跟不上。很多组件 <code>use client</code> 没有指令会导致在服务端组件中使用的时候会报错。这个时候需要我们自己在本地封装一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AcmeCarousel &#125; <span class="keyword">from</span> <span class="string">&#x27;acme-carousel&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AcmeCarousel;</span><br></pre></td></tr></table></figure><p>并不是所有的三方组件都需要封装一下，有一个例外是 <em>provider</em> 组件，因为他们只依赖React state和context，通常他们用在应用的root处。</p><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>大部分的React应用依赖 <em>context</em> 在组件之间共享数据，或者直接通过 <em>createContext*，或者通过第三方库 *provider</em> 导入。<br>从 <em>Next.js</em> 13开始， 客户端组件全面支持 <em>context*， 但是不能直接在服务端组件中创建或者消费。这是因为服务端组件没有 React state，因为他们不能交互，<br>*context</em> 主要用于渲染完成后渲染树下的交互组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> SidebarContext = createContext();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Sidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOpen, setIsOpen] = useState();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;SidebarContext.Provider value=&#123;&#123; isOpen &#125;&#125;&gt;</span><br><span class="line">      &lt;SidebarNav /&gt;</span><br><span class="line">    &lt;/SidebarContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SidebarNav</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; isOpen &#125; = useContext(SidebarContext);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Home&lt;/p&gt;</span><br><span class="line"> </span><br><span class="line">      &#123;isOpen &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Subnav</span> /&gt;</span></span>&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 <em>root</em> 中创建 <em>context</em> 会导致报错。</li><li><em>context</em> 的 <em>provider</em> 一般会在 <strong>root</strong> 附近创建，这样依赖可以提供全局支持。</li></ul><h3 id="服务端组件间共享数据"><a href="#服务端组件间共享数据" class="headerlink" title="服务端组件间共享数据"></a>服务端组件间共享数据</h3><p>服务端组件不支持React。那么可以通过js自身的一些能力来做数据共享，如单例。<br>请求结果数据的共享是不必要的耦合。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>一般 <em>app</em> 底下的都是服务端组件。</p><h3 id="路由约定"><a href="#路由约定" class="headerlink" title="路由约定"></a>路由约定</h3><ul><li>文件夹用于定义路由</li><li>叶子文件夹中包含了 <em>page.js</em> 用于定义UI<h3 id="文件约定"><a href="#文件约定" class="headerlink" title="文件约定"></a>文件约定</h3>客户端路由包含的文件：</li><li>page.js : 定义路由的UI，并且使次路由可公开访问<ul><li>route.js : 创建路由的服务端api端点</li></ul></li><li>layout.js : 为一个 <em>segment</em> 和它的子元素创建共享 <strong>UI</strong> 。一个 <em>layout</em> 包装了一个页面和他的子集。<ul><li>template.js : 和 <em>layout.js</em> 类似, 他会为导航中的每个字元素创建一个新的实例，这意味着state不会保留，每次都是重新创建。除非你需要这个特性，否则直接使用layout。</li></ul></li><li>loading.js :</li><li>error.js :<ul><li>global-error.js : </li></ul></li><li>not-found.js<br>当然，也可以添加其他文件，如css，测试用例，组件等等</li></ul><h3 id="利用客户端导航的服务端路由"><a href="#利用客户端导航的服务端路由" class="headerlink" title="利用客户端导航的服务端路由"></a>利用客户端导航的服务端路由</h3><p>服务端组件和客户端组件不一样。</p><h3 id="部分渲染"><a href="#部分渲染" class="headerlink" title="部分渲染"></a>部分渲染</h3><p>兄弟路由之间导航的时候，Next.js只渲染路由变动的部分，不会重新渲染整个也看。</p><h3 id="高级路由"><a href="#高级路由" class="headerlink" title="高级路由"></a>高级路由</h3><ul><li>平行路由 : 一次展示多个页面，多用于仪表盘</li><li>拦截路由 : </li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改<head></h3><p>可以通过内置的<strong>SEO支持</strong>，在 <em>app</em> 文件夹下面修改 <code>&lt;head&gt;</code> 元素，如 <em>title<em>，</em>meta</em></p><h3 id="路由之间的导航方法"><a href="#路由之间的导航方法" class="headerlink" title="路由之间的导航方法"></a>路由之间的导航方法</h3><ul><li>Link 组件， 需要href属性</li><li>useRouter 钩子</li></ul><h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>可以使用<code>usePathname()</code> 来判断链接是否是激活状态。</p><p>方式滚动到顶部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link href=<span class="string">&quot;/#hashid&quot;</span> scroll=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">  Scroll to specific id.</span><br><span class="line">&lt;/Link&gt;</span><br></pre></td></tr></table></figure><h4 id="useRouter"><a href="#useRouter" class="headerlink" title="useRouter"></a>useRouter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/navigation&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> router.push(<span class="string">&#x27;/dashboard&#x27;</span>)&#125;&gt;</span><br><span class="line">      Dashboard</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无特殊要求可以直接用 <em>link</em> 组件。</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><h3 id="Server-Component-Vs-Client-Component"><a href="#Server-Component-Vs-Client-Component" class="headerlink" title="Server Component Vs Client Component"></a>Server Component Vs Client Component</h3><p>服务端组件只在服务端渲染，可以在页面初始化的时候提速；客户端组件优先在客户端渲染，但是服务端也可以进行预渲染然后在客户端合成。<br><code>&#39;use client&#39;</code> 必须定义在第一行，所有import之前，模组里面只要在入口点定义一次就可以了，然后在模组里面导入的其他组件都将被视为客户端组件。<br>|场景|Server Component| Client Component |<br>|—-|—-|—-|<br>| 获取数据 | ✅ | ❎ |<br>| 访问后端资源 | ✅ | ❎ |<br>| 敏感数据保存在服务端（访问token，api key等等） | ✅ | ❎ |<br>| 将大型依赖保存在服务端/减少客户端js | ✅ | ❎ |<br>| 添加互动与事件监听 例如：onClick，onChange 等 | ❎ | ✅ |<br>| useState和生命周期effect : useState,useReducer,useEffect等 | ❎ | ✅ |<br>| 使用仅浏览器支持的api | ❎ | ✅ |<br>| 使用基于state，effect或者仅支持浏览器api的自定义钩子 | ❎ | ✅ |<br>| 使用React Class Component | ❎ | ✅ |</p><h4 id="组合使用的渲染流程"><a href="#组合使用的渲染流程" class="headerlink" title="组合使用的渲染流程"></a>组合使用的渲染流程</h4><ul><li>服务端在将渲染结果发送到客户端之前渲染所有的服务端组件<ul><li>包括了客户端组件内嵌的服务端组件</li><li>遇到客户端组件就跳过</li></ul></li><li>在客户端React渲染服务端返回的服务端组件渲染后的结果中的客户端组件和插槽<ul><li>如果客户端组件中嵌入了任何服务端组件，他们的渲染内容会正确的渲染到客户端组件中</li></ul></li></ul><p><em>Next.js</em> 在初始页面加载期间，会将以上组件渲染结果提前备服务端预渲染成html，以使页面加载更快。<br>在服务端渲染组件中的子客户端组件中，可以直接插入服务端组件。</p><p>鉴于以上流程，在客户端组件中导入服务端组件有一些限制：</p><blockquote><p>不能直接导入服务端组件，建议通过props的方式传入</p></blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://nextjs.org/docs/getting-started/installation">官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      Next.js 学习笔记
    
    </summary>
    
    
      <category term="Node" scheme="https://adoontheway.github.io/tags/Node/"/>
    
      <category term="React" scheme="https://adoontheway.github.io/tags/React/"/>
    
      <category term="Next.js" scheme="https://adoontheway.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点033 - 搭一下 Stable Diffusion WebUI</title>
    <link href="https://adoontheway.github.io/2023/04/04/everydayprogress033/"/>
    <id>https://adoontheway.github.io/2023/04/04/everydayprogress033/</id>
    <published>2023-04-04T05:51:42.000Z</published>
    <updated>2023-09-12T04:26:34.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>前不久看到好多朋友用上<strong>Stable Diffusion</strong>来做原画，然后又配合上了<strong>Chatgpt</strong>。<br>一直以来都想尝试一下，奈何2014款的双核mac跑个idea都发出了拖拉机的轰鸣声。<br>所以一直都是看一半就搁置。<br>然而，这也耐不住心情低落想要一些东西来分散自己的注意力，今天我就和他杠上了。</p><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mac Pro 2015 early</span><br><span class="line">CPU Intel Core i5 双核</span><br><span class="line">显卡: 想什么呢，怎么会有显卡呢</span><br></pre></td></tr></table></figure><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><h2 id="github上下载-Stable-Diffusion-Webui"><a href="#github上下载-Stable-Diffusion-Webui" class="headerlink" title="github上下载 Stable Diffusion Webui"></a>github上下载 Stable Diffusion Webui</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span><br></pre></td></tr></table></figure><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><p>下载 <a href="https://drive.yerf.org/wl/?id=EBfTrmcCCUAGaQBXVIj5lJmEhjoP1tgl">这个模型</a> 并移动到刚克隆好的 <strong>Stable Diffusion Webui</strong>的<code>models/Stable-diffusion</code>，并重命名为 <strong>model.ckpt</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>运行 <code>webui.sh</code>。<br>其中会遇到形形色色的问题。</p><h3 id="gradio-3-23-版本不对"><a href="#gradio-3-23-版本不对" class="headerlink" title="gradio==3.23 版本不对"></a>gradio==3.23 版本不对</h3><p>如果你用的是官方的源应该不会有问题，我用了号称5分钟同步一次的清华的源加速了我的pip，然后改成ali的加速源就没有问题了。</p><ul><li>~/.pip/pip.conf*<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="所有pip下载于安装github源的问题"><a href="#所有pip下载于安装github源的问题" class="headerlink" title="所有pip下载于安装github源的问题"></a>所有pip下载于安装github源的问题</h3>比如timeout一类的问题，基本都是github链接不稳定导致，多跑几次 <code>webui.sh</code> 基本可以覆盖掉</li></ul><h3 id="libavcodec-59-37-100-dylib-which-was-built-for-Mac-OS-X-11-0"><a href="#libavcodec-59-37-100-dylib-which-was-built-for-Mac-OS-X-11-0" class="headerlink" title="libavcodec.59.37.100.dylib (which was built for Mac OS X 11.0)"></a>libavcodec.59.37.100.dylib (which was built for Mac OS X 11.0)</h3><p>这个是因为我的电脑上Macos 10，而<em>opencv_python<em>这个库使用的libavcodec需要Mac OS 11以上的版本。<br>所以去<a href="https://pypi.org/project/opencv-python/#history">PYPI - opencv_python</a>的发布历史版本上找了个稍微不那么新的版本，用 *</em>opencv_python==4.5.5.64** 取代了 *venv</em> <strong>opencv_python==4.7.0.68</strong>，然后看到git issue中有不少人因此困住了，顺便去提供了一下此解决方案</p><h3 id="RuntimeError-“LayerNormKernelImpl”-not-implemented-for-‘Half’"><a href="#RuntimeError-“LayerNormKernelImpl”-not-implemented-for-‘Half’" class="headerlink" title="RuntimeError: “LayerNormKernelImpl” not implemented for ‘Half’"></a>RuntimeError: “LayerNormKernelImpl” not implemented for ‘Half’</h3><p>在网上看到是因为显卡不支持half-float数据类型，去加一些启动参数就可以了。<br>如下:<br><strong>webui-user.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> COMMANDLINE_ARGS=<span class="string">&quot;--skip-torch-cuda-test --precision full --no-half&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/back_git/article/details/127436898">Novelai 保姆级免费部署和最全使用教程</a><br><a href="https://www.bilibili.com/read/cv21987039#:~:text=%E6%8A%A5%E9%94%99%EF%BC%9A%20RuntimeError%3A%20%22LayerNormKernelImpl%22%20not%20implemented,for%20%27Half%27%20%E8%A7%A3%E5%86%B3%EF%BC%9A%E5%9C%A8%E7%BC%96%E8%BE%91%E5%99%A8%E4%BF%AE%E6%94%B9webui-user.bat%EF%BC%8C%E5%9C%A8COMMANDLINE_ARGS%3D%E5%90%8E%E9%9D%A2%E5%8A%A0%E4%B8%8A--skip-torch-cuda-test%20--precision%20full%20--no-half">自力更生：Stable Diffusion webui本地部署遇到的坑及解决</a></p>]]></content>
    
    <summary type="html">
    
      最近看到好多朋友用上ai画图了，我也来试试
    
    </summary>
    
    
      <category term="python" scheme="https://adoontheway.github.io/tags/python/"/>
    
      <category term="ai" scheme="https://adoontheway.github.io/tags/ai/"/>
    
      <category term="stable diffusion" scheme="https://adoontheway.github.io/tags/stable-diffusion/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点031 - 尝试一下OCR</title>
    <link href="https://adoontheway.github.io/2022/05/13/everydayprogress031/"/>
    <id>https://adoontheway.github.io/2022/05/13/everydayprogress031/</id>
    <published>2022-05-13T11:16:30.000Z</published>
    <updated>2023-05-25T10:26:16.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在改爬虫的bug。<br>今天先是搞定了 <em>cookie_jar</em> 不生效的问题，<br>接下来的问题就包括了图片验证码的识别，<br>所以要用到<em>ocr</em>。</p><blockquote><p><em>OCR</em> Optical Character Recognition</p></blockquote><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p><strong>Gayhub</strong> 上搜索 <em>ocr</em>，然后编程语言过限定 <em>Python</em>。<br>排名第一的飞桨的OCR，还要训练，因为电脑不好，也是因为懒，所以排除了；<br>排名第三的是一个叫做EasyOCR的东西，叫Easy的一般都很容易吧，搞起。</p><h2 id="整起"><a href="#整起" class="headerlink" title="整起"></a>整起</h2><p>仔细阅读Readme，第一步安装，然后note，需要pytorch，我了个去。<br>来都来了，去找别的也麻烦，就这个吧，选择困难综合症的最有效良药就是：来都来了，将就一下吧</p><h3 id="安装pytorch与torchvision"><a href="#安装pytorch与torchvision" class="headerlink" title="安装pytorch与torchvision"></a>安装pytorch与torchvision</h3><p>依照pytorch官网的指引，下载了cuda支持windows和使用gpu的版本。<br>选完就后悔了，我的垃圾显卡，选GPU不是多余么？<br>但是，来都来的….</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</span><br></pre></td></tr></table></figure><p>等待过程是漫长的，因为</p><ul><li>cudatoolkit 545MB</li><li>pytorch   1.23GB<br>还HTTP error了</li></ul><h3 id="安装EasyOCR"><a href="#安装EasyOCR" class="headerlink" title="安装EasyOCR"></a>安装EasyOCR</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search easyocr</span><br></pre></td></tr></table></figure><p>找不到，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search ocr</span><br></pre></td></tr></table></figure><p>也找不到，也就是这个没有发布到anaconda上，还是老老实实的用<code>pip</code>安装吧。  </p><p>在pytorch还在下载的时候，顺便开下命令行，下载easyocr.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate crawler</span><br><span class="line">pip install easyocr</span><br></pre></td></tr></table></figure><h3 id="Code-amp-Result"><a href="#Code-amp-Result" class="headerlink" title="Code &amp; Result"></a>Code &amp; Result</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.environ[<span class="string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>]=<span class="string">&#x27;True&#x27;</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;en&#x27;</span>])</span><br><span class="line"><span class="comment"># 人工解析以及预期的结果</span></span><br><span class="line">expected = [<span class="string">&#x27;pppn&#x27;</span>,<span class="string">&#x27;gaac&#x27;</span>,<span class="string">&#x27;peuf&#x27;</span>,<span class="string">&#x27;gtdb&#x27;</span>,<span class="string">&#x27;qeat&#x27;</span>,<span class="string">&#x27;dphc&#x27;</span>,<span class="string">&#x27;i7u2&#x27;</span>,<span class="string">&#x27;8nui&#x27;</span>,<span class="string">&#x27;4q7f&#x27;</span>,<span class="string">&#x27;jj3d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    filename = <span class="string">&#x27;./ocr/res/&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    result = reader.readtext(filename,detail=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(expected[i-<span class="number">1</span>],<span class="string">&#x27;------&#x27;</span>,result)</span><br></pre></td></tr></table></figure><p>结果输出如下：<br><img data-src="./2.png" alt="结果输出"></p><p><img data-src="./3.png" alt="资源"><br>看起来结果偏差还是很大的，后续研究一下有没有什么可以优化的地方以得到想要的结果。</p><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="15-Initializing-libiomp5md-dll-but-found-libiomp5md-dll-already-initialized"><a href="#15-Initializing-libiomp5md-dll-but-found-libiomp5md-dll-already-initialized" class="headerlink" title="#15: Initializing libiomp5md.dll, but found libiomp5md.dll already initialized"></a>#15: Initializing libiomp5md.dll, but found libiomp5md.dll already initialized</h3><blockquote><p>OMP: Error #15: Initializing libiomp5md.dll, but found libiomp5md.dll already initialized.<br>OMP: Hint This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see <a href="http://www.intel.com/software/products/support/">http://www.intel.com/software/products/support/</a>.<br><code>libiomp5md.dll</code> 重复了。</p></blockquote><p>上面提醒的是重复可能会影响性能或者导致错误的结果。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.environ[<span class="string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>]=<span class="string">&#x27;True&#x27;</span></span><br></pre></td></tr></table></figure><p>在代码中加入以上代码已允许重复。<br>但是运行的时候还是报这个错。</p><p>去对应的<em>conda</em> <em>env</em> 中搜索此库。<br>搜索到了2个，一个位于 <code>anaconda3/envs/crawler/Lib/site-packages/**</code>下面,<br>另一个位于 <code>anaconda3/envs/crawler/Library/bin</code>下面，将这个库的加上一个随便的后缀 <code>.bak</code> 以让它失效。<br><img data-src="./1.png" alt="修改后的样子"></p><h2 id="hexo-jsdelivr-加载不到的问题"><a href="#hexo-jsdelivr-加载不到的问题" class="headerlink" title="hexo jsdelivr 加载不到的问题"></a>hexo jsdelivr 加载不到的问题</h2><p>写此文的时候，<code>hexo</code> 加载不了 <code>cdn.jsdelivr</code> 上托管的 <em>js</em> 库， 搜索后发现此域名已经改为托管到 <em>cloudflare</em> 下了。<br>需要将域名替换为 <code>fastly.jsdelivr.net</code> 就可以了。</p><p>需要替换的文件为 <code>themes/hexo-theme-next/layout/_script/vendors.swig</code>,如下：<br><img data-src="./4.png" alt="jsdelivr"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://github.com/JaidedAI/EasyOCR">github.com/JaidedAI/EasyOCR</a></li><li><a href="https://pytorch.org/">pytorch.org</a></li><li><a href="https://blog.csdn.net/m0_50736744/article/details/121799432">解决OMP: Error #15</a></li></ul>]]></content>
    
    <summary type="html">
    
      ocr的使用
    
    </summary>
    
    
      <category term="python" scheme="https://adoontheway.github.io/tags/python/"/>
    
      <category term="hexo" scheme="https://adoontheway.github.io/tags/hexo/"/>
    
      <category term="ocr" scheme="https://adoontheway.github.io/tags/ocr/"/>
    
      <category term="pytorch" scheme="https://adoontheway.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点030 - 最近使用Python的一些笔记</title>
    <link href="https://adoontheway.github.io/2022/03/27/everydayprogress030/"/>
    <id>https://adoontheway.github.io/2022/03/27/everydayprogress030/</id>
    <published>2022-03-27T03:58:20.000Z</published>
    <updated>2022-03-27T04:06:23.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>今天看了下 <strong>github/awsome-go</strong> ，发现以前真的是死心眼，凡事自己死磕，而不是去看看网上成熟的解决方案。<br>现在有很多 <strong>awsome-xxxx</strong> 在效率优先的情况下，没必要去死磕，重复造轮子啊。</p><h2 id="ImportError-No-module-named-xxxxx"><a href="#ImportError-No-module-named-xxxxx" class="headerlink" title="ImportError: No module named xxxxx"></a>ImportError: No module named xxxxx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py_module = __import__(name = module_file_path)</span><br><span class="line">ImportError: No module named xxxxx.xxxxxxx</span><br></pre></td></tr></table></figure><p>在需要导入的模组的文件里加入空的 <code>__init__.py</code> 就好了</p><h2 id="tornado-queuetornado-queue"><a href="#tornado-queuetornado-queue" class="headerlink" title="tornado.queuetornado.queue"></a>tornado.queuetornado.queue</h2><p><code>tornado.queue</code>为了协程实现了异步生产者/消费者模式，和<em>Python</em>自带的<strong>queue</strong>为线程而实现的一样。<br><code>Queue.get</code>会有一个协程专门等到队列中有数据。如果队列满了，会有专门的协程等待<code>Queue.put</code>争取到空间。<br><code>Queue</code>维护了一定数量的未完成的任务，数量从0开始，<code>put</code>会增加数量,<code>task_done</code>会减少数量。</p><h2 id="tornado-web应用的结构"><a href="#tornado-web应用的结构" class="headerlink" title="tornado web应用的结构"></a>tornado web应用的结构</h2><p><em>Tornado</em> web应用是由多个 <code>RequestHandler</code> 子类，一个用于将进来的请求路由到对应的处理的 <code>Application</code>， 一个用来启动的 <code>main()</code> 组成的</p><h2 id="setproctitle"><a href="#setproctitle" class="headerlink" title="setproctitle"></a>setproctitle</h2><p>修改进程名用的</p><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>和lua类似的字节流封装</p><h3 id="头字符：表示字节顺序，大小和对齐方式"><a href="#头字符：表示字节顺序，大小和对齐方式" class="headerlink" title="头字符：表示字节顺序，大小和对齐方式"></a>头字符：表示字节顺序，大小和对齐方式</h3><table><thead><tr><th>字符</th><th>字节顺序</th><th>大小</th><th>对齐方式</th></tr></thead><tbody><tr><td>@</td><td>按原字节</td><td>按原字节</td><td>按原字节</td></tr><tr><td>=</td><td>按原字节</td><td>标准</td><td>无</td></tr><tr><td>&lt;</td><td>小端</td><td>标准</td><td>无</td></tr><tr><td>&gt;</td><td>大端</td><td>标准</td><td>无</td></tr><tr><td>!</td><td>网络（=大端）</td><td>标准</td><td>无</td></tr></tbody></table><h3 id="格式字符"><a href="#格式字符" class="headerlink" title="格式字符"></a>格式字符</h3><table><thead><tr><th>格式</th><th>C 类型</th><th>Python 类型</th><th>标准大小</th><th>注释</th></tr></thead><tbody><tr><td>x</td><td>填充字节</td><td>无</td><td></td><td></td></tr><tr><td>c</td><td>char</td><td>string of length 1</td><td>1</td><td></td></tr><tr><td>b</td><td>signed char</td><td>整数</td><td>1</td><td>(3)</td></tr><tr><td>B</td><td>unsigned char</td><td>整数</td><td>1</td><td>(3)</td></tr><tr><td>?</td><td>_Bool</td><td>bool</td><td>1</td><td>(1)</td></tr><tr><td>h</td><td>short</td><td>整数</td><td>2</td><td>(3)</td></tr><tr><td>H</td><td>unsigned short</td><td>整数</td><td>2</td><td>(3)</td></tr><tr><td>i</td><td>int</td><td>整数</td><td>4</td><td>(3)</td></tr><tr><td>I</td><td>unsigned int</td><td>整数</td><td>4</td><td>(3)</td></tr><tr><td>l</td><td>long</td><td>整数</td><td>4</td><td>(3)</td></tr><tr><td>L</td><td>unsigned long</td><td>整数</td><td>4</td><td>(3)</td></tr><tr><td>q</td><td>long long</td><td>整数</td><td>8</td><td>(2), (3)</td></tr><tr><td>Q</td><td>unsigned long long</td><td>整数</td><td>8</td><td>(2), (3)</td></tr><tr><td>f</td><td>float</td><td>浮点数</td><td>4</td><td>(4)</td></tr><tr><td>d</td><td>double</td><td>浮点数</td><td>8</td><td>(4)</td></tr><tr><td>s</td><td>char[]</td><td>string</td><td></td><td></td></tr><tr><td>p</td><td>char[]</td><td>string</td><td></td><td></td></tr><tr><td>P</td><td>void *</td><td>整数</td><td></td><td>(5), (3)</td></tr></tbody></table><blockquote><ol><li>‘?’ 转换码对应于 C99 定义的 _Bool 类型。 如果此类型不可用，则使用 char 来模拟。 在标准模式下，它总是以一个字节表示。</li></ol></blockquote><p>2.6 新版功能.</p><blockquote><ol start="2"><li>‘q’ 和 ‘Q’ 只有在本地C编译器指出C long long类型行，或者在Windows上支持 __int64的时候才有效。在标准模式下一般都能用。</li></ol></blockquote><p>2.2 新版功能.</p><blockquote><ol start="3"><li>在使用任何整形转码的来包装非整形的时候，如果这个非整形有 <code>__index__()</code> 方法，那么在包装之前会调用此方法来转换参数。 如果没有 <code>__index__()</code>方法，或者调用 <code>__index__()</code> 发生了 <em>TypeError</em> 错误, 那么就会尝试 <code>__int__()</code>。虽然 <code>__int__()</code> 已经废弃，且会抛出 <em>DeprecationWarning</em>。</li></ol></blockquote><blockquote><p>在 2.7 版更改: 2.7中非整数据的 <code>__index__()</code> 全新使用方法。</p></blockquote><blockquote><p>在 2.7 版更改: 在 2.7 版本中, 并不是所有的整形转换都使用 <code>__int__()</code> 方法, <em>DeprecationWarning</em> 只会在 <strong>float</strong> 转换的时候抛出。</p></blockquote><blockquote><ol start="4"><li>对于 ‘f’ 和 ‘d’ 格式字符, 封包形式用的是 <code>IEEE 754 binary32 (&#39;f&#39;)</code> 或者 <code>binary64 (&#39;d&#39;)</code> 格式, 与平台使用的浮点格式无关。</li></ol></blockquote><blockquote><ol start="5"><li>‘P’ 格式字符仅对本机字节顺序可用（选择为默认或使用 ‘@’ 字节顺序字符）。 字节顺序字符 ‘=’ 选择使用基于主机系统的小端或大端排序。 struct 模块不会将其解读为本机排序，因此 ‘P’ 格式将不可用。</li></ol></blockquote><blockquote><p>格式字符之前可以带有整数重复计数。 例如，格式字符串 ‘4h’ 的含义与 ‘hhhh’ 完全相同。</p></blockquote><blockquote><p>格式之间的空白字符会被忽略；但是计数及其格式字符中不可有空白字符。</p></blockquote><blockquote><p>对于 ‘?’ 格式字符，返回值为 True 或 False。 在打包时将会使用参数对象的逻辑值。 以本机或标准 bool 类型表示的 0 或 1 将被打包，任何非零值在解包时将为 True。</p></blockquote><blockquote><p>对于 ‘s’ 格式字符, 个数会解释为字符串的尺寸, 不想其他格式字符一样转换为重复次数; 例如, ‘10s’ 表示的是一个简单的 <em>10-字节字符串</em>, 但是 ‘10c’ 指的是 10 字符。如果没有指定个数的话，默认就是1。为了便于封包，字符串会被截断或者用空字节来填充来适配。对于解包，还是会根据指定的字节数完美的解出字符串。作为特里，’0s’ 意味着一个单个的空的字符串(而 ‘0c’ 代表 0 个字符).</p></blockquote><blockquote><p>对于’p’ 格式字符对一个 <strong>“Pascal string”</strong> 编码, 意味着一个短的可变长度的字符串存储在一段指定长度的字节中。第一个字节存储的是字符串的长度，或者是255，无论如何都比255小。接下来的字节都是字符串的字节了。如果传入 <code>pack()</code> 的字符串太长 (比count - 1还要长), 那么只会存储字符串前面的 count-1 字节。如果字符串比 count-1 , 那么会用空字节来填充，这样一来就可以用精确的字节数。注意，对于 <code>unpack()</code>,  ‘p’ 格式字符需要消费 <em>count</em> 字节,但是字符串永远都不要超过255个字符。</p></blockquote><blockquote><p>对于 ‘P’ 格式字符，返回值是一个 Python 整形或者长整形，这取决于在转换为整形之后返回的指针的需要的大小。 <em>NULL</em> 指针永远是返回 <strong>Python</strong> 整数 0。在封包指针大小的值的时候， 会用到 <em>Python</em> 整形或者长整形。例如： Alpha 和 Merced 处理器使用的是 64-bit 指针值，意味着会用一个 Python 长整型来持有这个指针; 其他平台使用的是 32-bit 指针，那么他会用 Python 整形。</p></blockquote><p><a href="https://docs.python.org/zh-cn/2.7/library/struct.html">Python 2.7 struct</a></p><h2 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h2><h3 id="WebSocket的使用方式"><a href="#WebSocket的使用方式" class="headerlink" title="WebSocket的使用方式"></a>WebSocket的使用方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado</span><br><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"></span><br><span class="line">app = tornado.web.Application([</span><br><span class="line">    (<span class="string">r&quot;/&quot;</span>, tornado.websocket.WebSocketHandlerExtended),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">self._http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">self._http_server.bind(port) <span class="comment"># websocket 端口</span></span><br><span class="line">self._http_server.start(num_processes) <span class="comment">#num_processes子进程数</span></span><br><span class="line">tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><h2 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h2><p>轻量级协程，<em>gevent</em> 也是用的 <em>greenlet</em></p><ol><li>经常与线程 <em>threads</em>,或者<strong>Python</strong>内置的携程<code>async def</code>配合使用</li><li>多线程有并发性的问题，需要用 <em>queue</em> 或者 <em>locks</em> 来避免 <em>race condition</em>,<em>deadlock</em> 以及其他的问题。<em>greenlet</em>之间是有序协作的，同时只能有一个<em>greenlet</em>运行。可以完全控制<em>greenlet</em>的切换，从而解决了竞态条件问题。</li><li>线程需要申请系统资源，如线程栈，系统预留，而 <em>greenlet</em> 只需要很少的资源</li></ol><p><code>greenlet().switch()</code>切换到这个调用 <code>switch</code> 的协程</p><p><a href="https://greenlet.readthedocs.io/en/latest/">greenlet</a></p><h2 id="Python-编码出错的问题"><a href="#Python-编码出错的问题" class="headerlink" title="Python 编码出错的问题"></a>Python 编码出错的问题</h2><p>文件头里有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>VS Code工具栏也显示的 <em>UTF-8</em>,那么看看控制台是否有乱码，有的话运行：<code>chcp 65001</code> 试试看</p><h2 id="之前面试被问到过的MySQL引擎问题"><a href="#之前面试被问到过的MySQL引擎问题" class="headerlink" title="之前面试被问到过的MySQL引擎问题"></a>之前面试被问到过的MySQL引擎问题</h2><p><a href="https://www.imooc.com/article/269997">MySQL引擎介绍</a></p><h2 id="collections库"><a href="#collections库" class="headerlink" title="collections库"></a>collections库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Counter</span></span><br><span class="line">c = collections.Counter(<span class="string">&quot;hello world, hello world,hello world,hello &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> c</span><br><span class="line"><span class="comment"># 查看元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>(c.elements())</span><br><span class="line"><span class="comment"># 获取元素的个数，也可以用get()</span></span><br><span class="line"><span class="built_in">print</span> c[<span class="string">&quot;h&quot;</span>]</span><br><span class="line">c = collections.Counter(<span class="string">&quot;hello world hello world hello &quot;</span>.split())</span><br><span class="line"><span class="built_in">print</span> c</span><br><span class="line"><span class="comment"># c.update()</span></span><br><span class="line"><span class="comment"># defaultdict:指定value类型，不存在的给初始值</span></span><br></pre></td></tr></table></figure><blockquote><p> Counter({‘l’: 11, ‘o’: 7, ‘ ‘: 5, ‘e’: 4, ‘h’: 4, ‘d’: 3, ‘,’: 3, ‘r’: 3, ‘w’: 3})</p></blockquote><blockquote><p>[‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘, ‘e’, ‘e’, ‘e’, ‘e’, ‘d’, ‘d’, ‘d’, ‘h’, ‘h’, ‘h’, ‘h’, ‘l’, ‘l’, ‘l’, ‘l’, ‘l’, ‘l’, ‘l’, ‘l’, ‘l’, ‘l’, ‘l’, ‘o’, ‘o’, ‘o’, ‘o’, ‘o’, ‘o’, ‘o’, ‘,’, ‘,’, ‘,’, ‘r’, ‘r’, ‘r’, ‘w’, ‘w’, ‘w’]</p></blockquote><blockquote><p>4</p></blockquote><blockquote><p>Counter({‘hello’: 3, ‘world’: 2})</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">d[<span class="string">&quot;a&quot;</span>] += <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> d</span><br><span class="line">s = [(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>),(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>),(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>),(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;d&quot;</span>)]</span><br><span class="line">d = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> s:</span><br><span class="line">    d[k].append(v)</span><br><span class="line"><span class="built_in">print</span> d</span><br></pre></td></tr></table></figure><blockquote><p>defaultdict(&lt;type ‘int’&gt;, {‘a’: 2})</p></blockquote><blockquote><p>defaultdict(&lt;type ‘list’&gt;, {‘a’: [‘b’, ‘c’, ‘d’], ‘b’: [‘c’]})</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OrderedDict:保留添加顺序</span></span><br><span class="line">o = collections.OrderedDict()</span><br><span class="line">o[<span class="string">&quot;1&quot;</span>] = <span class="number">1</span></span><br><span class="line">o[<span class="string">&quot;3&quot;</span>] = <span class="number">3</span></span><br><span class="line">o[<span class="string">&#x27;2&#x27;</span>]=<span class="number">2</span></span><br><span class="line">o[<span class="string">&quot;10&quot;</span>]=<span class="number">10</span></span><br><span class="line">o[<span class="string">&quot;8&quot;</span>]=<span class="number">8</span></span><br><span class="line">o[<span class="string">&quot;1&quot;</span>]=<span class="number">100</span> <span class="comment">#重复赋值不会重新排序</span></span><br><span class="line"><span class="built_in">print</span> o</span><br></pre></td></tr></table></figure><blockquote><p>OrderedDict([(‘1’, 100), (‘3’, 3), (‘2’, 2), (‘10’, 10), (‘8’, 8)])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># namedtuple(命名元组的构造器)</span></span><br><span class="line"><span class="comment"># 3种命名元组的方法</span></span><br><span class="line">p = collections.namedtuple(<span class="string">&quot;Person&quot;</span>,[<span class="string">&quot;age&quot;</span>,<span class="string">&quot;height&quot;</span>,<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="built_in">print</span> p</span><br><span class="line">h = collections.namedtuple(<span class="string">&quot;Human&quot;</span>,<span class="string">&quot;age, height, name&quot;</span>)</span><br><span class="line">Human1 = collections.namedtuple(<span class="string">&quot;Human1&quot;</span>, <span class="string">&quot;age height name&quot;</span>)</span><br><span class="line">tom = p(<span class="number">30</span>, <span class="number">178</span>, <span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> tom</span><br><span class="line"><span class="built_in">print</span> tom.age</span><br></pre></td></tr></table></figure><blockquote><p>&lt;class ‘<strong>main</strong>.Person’&gt;</p></blockquote><blockquote><p>Person(age=30, height=178, name=’Tom’)</p></blockquote><blockquote><p>30</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deque 返回一个新的双向队列对象，支持线程安全，对于两端添加或者弹出，时间复杂度O(1)</span></span><br><span class="line"><span class="comment"># 虽然list对象也支持类似操作，但是这里优化了定长操作（pop(0)、insert(0,v)）的开销</span></span><br><span class="line"><span class="comment"># 没指定maxLen，可以增长到任意长度，定长的如果满了会从另一端弹出</span></span><br><span class="line">dq = collections.deque(maxlen=<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span> dq</span><br><span class="line">dq.extend(<span class="string">&#x27;python&#x27;</span>) <span class="comment"># 从队列右侧添加iterable中的元素</span></span><br><span class="line"><span class="built_in">print</span> dq</span><br><span class="line">dq.append(<span class="string">&quot;he&quot;</span>) <span class="comment"># 添加到右侧</span></span><br><span class="line"><span class="built_in">print</span> dq</span><br><span class="line">dq.appendleft(<span class="string">&quot;ma&quot;</span>) <span class="comment"># 添加做左侧</span></span><br><span class="line"><span class="built_in">print</span> dq</span><br></pre></td></tr></table></figure><blockquote><p>deque([], maxlen=6)</p></blockquote><blockquote><p>deque([‘p’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’], maxlen=6)</p></blockquote><blockquote><p>deque([‘y’, ‘t’, ‘h’, ‘o’, ‘n’, ‘he’], maxlen=6)</p></blockquote><blockquote><p>deque([‘ma’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’], maxlen=6)</p></blockquote><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line">    <span class="comment"># 不加合格的话在外头打印func.__name__会打印到这里来</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warp_the_func</span>():</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Wrap Layer1 begin&quot;</span></span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Wrap Layer end&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> warp_the_func</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_need_decotator</span>():</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Func Main&quot;</span></span><br><span class="line"></span><br><span class="line">func_need_decotator()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;-----------------------------&quot;</span></span><br><span class="line">func_decotated = a_new_decorator(func_need_decotator)</span><br><span class="line">func_decotated()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;-----------------------------&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_with_decorator</span>():</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Hehe&quot;</span></span><br><span class="line"></span><br><span class="line">fun_with_decorator()</span><br></pre></td></tr></table></figure><blockquote><h2 id="Func-Main"><a href="#Func-Main" class="headerlink" title="Func Main"></a>Func Main</h2><p>Wrap Layer1 begin<br>Func Main<br>Wrap Layer end</p><hr><p>Wrap Layer1 begin<br>Hehe<br>Wrap Layer end</p></blockquote><h2 id="Java注解"><a href="#Java注解" class="headerlink" title="Java注解"></a>Java注解</h2><h3 id="标记注解"><a href="#标记注解" class="headerlink" title="标记注解"></a>标记注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有点像定义一个接口一样，只不过它多了一个@</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元数据注解"><a href="#元数据注解" class="headerlink" title="元数据注解"></a>元数据注解</h3><h4 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">//定义了两个成员变量</span></span><br><span class="line">    <span class="function">String <span class="title">username</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//注解拥有什么属性，在修饰的时候就要给出相对应的值</span></span><br><span class="line"><span class="meta">@MyAnnotation(username = &quot;zhongfucheng&quot;, age = 20)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">//定义了两个成员变量</span></span><br><span class="line">    <span class="function">String <span class="title">username</span><span class="params">()</span> <span class="keyword">default</span> &quot;zicheng&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解为Value"><a href="#注解为Value" class="headerlink" title="注解为Value"></a>注解为Value</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation2(&quot;zhongfucheng&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>来源： <a href="https://www.jianshu.com/p/89f4c9d7d37b">注解就这么简单</a></li></ul>]]></content>
    
    <summary type="html">
    
      这是最近做使用python的过程中遇到的一些问题和知识点笔记
    
    </summary>
    
    
      <category term="python" scheme="https://adoontheway.github.io/tags/python/"/>
    
      <category term="tornado" scheme="https://adoontheway.github.io/tags/tornado/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点029 - Python数据科学教程的学习</title>
    <link href="https://adoontheway.github.io/2022/03/21/everydayprogress029/"/>
    <id>https://adoontheway.github.io/2022/03/21/everydayprogress029/</id>
    <published>2022-03-21T08:22:46.000Z</published>
    <updated>2022-03-27T04:43:04.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在网站上看到了微软在 <em>github</em> 开源的机器学习，数据科学，物联网的相关教程，比较感兴趣，学到就是赚到，<br>于是跟着教程学了一下，总比闲的发慌自我压迫的好。<br>之前是直接在网页上用 <em>Jupyter Notebook</em> ，现在上改用 <em>conda</em> 然后是 <em>VS Code</em> 上使用 <em>Jupyter</em> 插件。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 最基础的Series</span></span><br><span class="line">airports = pd.Series([</span><br><span class="line">    <span class="string">&quot;Seattle-Tacoma&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Dulles&quot;</span>,</span><br><span class="line">    <span class="string">&quot;London Heathrow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Schiphol&quot;</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># shape查看数据集尺寸的</span></span><br><span class="line">airports.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:(3,2)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础的DataFrame的使用</span></span><br><span class="line">airports = pd.DataFrame([</span><br><span class="line">    [<span class="string">&quot;Seattle-Tacoma&quot;</span>,<span class="string">&quot;Seattle&quot;</span>,<span class="string">&quot;USA&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;Dulles&quot;</span>,<span class="string">&quot;Washington&quot;</span>,<span class="string">&quot;USA&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;London Heathroe&quot;</span>,<span class="string">&quot;London&quot;</span>,<span class="string">&quot;British&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;Schiphol&quot;</span>,<span class="string">&quot;Amstrerdam&quot;</span>,<span class="string">&quot;Netherlands&quot;</span>],</span><br><span class="line">],columns=[<span class="string">&quot;Name&quot;</span>,<span class="string">&quot;City&quot;</span>,<span class="string">&quot;Country&quot;</span>])</span><br></pre></td></tr></table></figure><p><img data-src="./1.png" alt="DataFrame"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据集的信息，可以看数据集有多少数据，有多少不完整的数据等</span></span><br><span class="line">airports.info()</span><br></pre></td></tr></table></figure><p><img data-src="./2.png" alt="DataFrame.inf"></p><p><em>loc</em>和<em>iloc</em>用于访问指定的列:loc是基于标签查找，iloc是基于索引查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问某个特定的列</span></span><br><span class="line"><span class="comment"># airports[&quot;Country&quot;]</span></span><br><span class="line"><span class="comment"># airports[[&quot;Country&quot;,&quot;City&quot;]]</span></span><br><span class="line"><span class="comment"># 二维数组访问法</span></span><br><span class="line"><span class="comment"># airports.iloc[0,1]</span></span><br><span class="line"><span class="comment"># 访问全部数据，二维坐标访问</span></span><br><span class="line"><span class="comment"># airports.iloc[:,:]</span></span><br><span class="line"><span class="comment"># airports.iloc[:,[0,2]]</span></span><br><span class="line">airports.loc[:,[<span class="string">&quot;Name&quot;</span>,<span class="string">&quot;Country&quot;</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从cvs导入数据，当然，也可以将数据存放到csv</span></span><br><span class="line">airports_df = pd.read_csv(<span class="string">&quot;data/airport.csv&quot;</span>,on_bad_lines=<span class="string">&quot;warn&quot;</span>,header=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 将数据存入csv3</span></span><br><span class="line">airports_df.to_csv()</span><br><span class="line">delay_df = pd.read_csv(<span class="string">&quot;data/arrive_time.csv&quot;</span>)</span><br><span class="line"><span class="comment"># drop返回新的DataFrame</span></span><br><span class="line"><span class="comment"># new_df = delay_df.drop(columns=[&quot;Actual_arr_time&quot;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inplace改变原dataframe</span></span><br><span class="line">delay_df.drop(columns=[<span class="string">&quot;Actual_arr_time&quot;</span>],inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉空项目</span></span><br><span class="line">nonnull_df = delay_df.dropna()</span><br><span class="line"><span class="comment"># 是否修改当前DataFrame</span></span><br><span class="line"><span class="comment"># delay_df.dropna(inplace=True)</span></span><br><span class="line"><span class="comment"># 查询重复的项目</span></span><br><span class="line">delay_df.duplicated()</span><br><span class="line"><span class="comment"># 去除重复项目</span></span><br><span class="line">delay_df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="VS-Code插件无法更新的问题"><a href="#VS-Code插件无法更新的问题" class="headerlink" title="VS Code插件无法更新的问题"></a>VS Code插件无法更新的问题</h2><p>Jupyter插件对于VS Code是有版本要求的，我的 VS Code刚好就更新不了，于是去网上搜索了一下，发现这个是Mac版本的问题，导致Download中的 App 无法更新，我重新下载了最新版本的 VS Code，然后通过 mv 指令将它移动到 Applications 下面，就ok了。</p><h2 id="Jupyter中conda配置"><a href="#Jupyter中conda配置" class="headerlink" title="Jupyter中conda配置"></a>Jupyter中conda配置</h2><p>通过 Command+Shift+P 召唤命令菜单，新建 Jupyter Notebook ，发现导入不了包，后来通过 conda 新建了一个环境，在命令行中active，install都没有用，最后发现右上角有个选择环境的入口:<br><img data-src="./1647851689922.jpg" alt="conda env chose"></p><h2 id="scikit-learn的使用"><a href="#scikit-learn的使用" class="headerlink" title="scikit-learn的使用"></a>scikit-learn的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">delay_df = pd.read_csv(<span class="string">&quot;some_csv&quot;</span>)</span><br><span class="line"><span class="comment"># 去除空值</span></span><br><span class="line">delay_df.dropna(implace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 取可能对结果有影响的因素</span></span><br><span class="line">X = delay_df.loc[:,[<span class="string">&quot;DISTANCE&quot;</span>,<span class="string">&quot;CRS_ELAPSED_TIME&quot;</span>]]</span><br><span class="line"><span class="comment"># 取实际需要预测的值</span></span><br><span class="line">y = delay_df.loc[:,[<span class="string">&quot;ARR_DELAY&quot;</span>]]</span><br><span class="line"><span class="comment"># 将整体数据分为训练数据和测试数据两个部分</span></span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=<span class="number">0.3</span>,random_state=<span class="number">42</span>)</span><br><span class="line"><span class="comment"># 使用线性回归进行模型训练</span></span><br><span class="line">regressor = LinearRegression()</span><br><span class="line">regressor.fit(X_train,y_train)</span><br><span class="line"><span class="comment"># 使用此模型来进行预测</span></span><br><span class="line">y_predict = regressor.predict(X_test)</span><br><span class="line"><span class="comment"># 返回值其实不是DataFrame 而是numpy数组</span></span><br><span class="line"><span class="built_in">type</span>(y_predict)</span><br><span class="line"><span class="comment"># numpy.ndarray</span></span><br><span class="line"><span class="comment"># MSE: Mean Squared Error 用来衡量模型的准确度，值越低越好</span></span><br><span class="line"><span class="comment"># 将 y_predict 封装为DataFrame</span></span><br><span class="line">y_predict_df = pd.DataFrame(y_predict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># mse = mean((y_test-y_predict)**2)</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">mse = metrics.mean_squared_error(y_test,y_predict)</span><br><span class="line"><span class="comment"># RMSE:Root Mean Squared Error即 MSE的根</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">rmse = num.sqrt(mse)</span><br><span class="line"><span class="comment"># MAE: mae 没有 rmse敏感 MAE=meam(abs(actuals - predicts))</span></span><br><span class="line">mae = metrics.mean_absolute_error(y_test, y_predict)</span><br><span class="line"><span class="comment"># R Squared: 这个值越高，模型越好</span></span><br><span class="line">r2 = metrics.r2_score(y_test, y_predict)</span><br><span class="line"><span class="comment"># 不同的模型用不同的方法衡量精确度， scikit-learn 和 numpy 提供了大量的方法来衡量精确度</span></span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://www.bilibili.com/video/BV1nz411q7EQ?p=18&spm_id_from=pageDriver">Bilibili - 微软Python数据科学官方教程</a></li><li><a href="https://github.com/microsoft/Data-Science-For-Beginners">Github - Microsoft/Data Science For Beginners</a></li><li><a href="https://scikit-learn.org.cn/">scikit-learn.cn</a></li></ol>]]></content>
    
    <summary type="html">
    
      最近看到微软的Python数据科学入门教程，学习了一下
    
    </summary>
    
    
      <category term="python" scheme="https://adoontheway.github.io/tags/python/"/>
    
      <category term="conda" scheme="https://adoontheway.github.io/tags/conda/"/>
    
      <category term="pandas" scheme="https://adoontheway.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点028 - Flutter状态管理之Provider</title>
    <link href="https://adoontheway.github.io/2022/02/27/everydayprogress028/"/>
    <id>https://adoontheway.github.io/2022/02/27/everydayprogress028/</id>
    <published>2022-02-27T14:02:31.000Z</published>
    <updated>2022-03-21T08:36:38.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在选择适合自己个人项目的异步UI刷新方式。</p><p>Provider 是 InheritedWidget 的一个包装，提高了它的可用性和易用性，提供了依赖注入，允许在Widget树中灵活的处理和传递数据。</p><p>InheritedWidget 能够向下高效传播信息的基类。实现的过程比较简单，根据约定提供一个静态方法来调用 BuildContext.dependOnInheritedWidgetOfExactType 以获取“最近”的指定类型的 inherited widget的实例。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://pub.flutter-io.cn/packages/provider">Provider</a></li><li><a href="https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html">InheritedWidget</a></li><li><a href="https://book.flutterchina.club/chapter7/inherited_widget.html">数据共享-InheritedWidget</a></li><li><a href="https://juejin.cn/post/6940814394234241038">Flutter 状态管理 - Provider</a></li><li><a href="https://flutter.cn/docs/development/data-and-backend/state-mgmt/simple">简单的应用状态管理</a></li></ol>]]></content>
    
    <summary type="html">
    
      今天看看provider是干啥的
    
    </summary>
    
    
      <category term="flutter" scheme="https://adoontheway.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点027 - Flutter异步UI更新</title>
    <link href="https://adoontheway.github.io/2022/02/27/everydayprogress027/"/>
    <id>https://adoontheway.github.io/2022/02/27/everydayprogress027/</id>
    <published>2022-02-27T10:23:06.000Z</published>
    <updated>2022-02-27T10:50:14.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>其实这几篇笔记都是记录几种ui的更新方式。</p><p>这一篇是记录的 <strong>StreamBuilder</strong></p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="两个例子"><a href="#两个例子" class="headerlink" title="两个例子"></a>两个例子</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamBuilderPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  StreamBuilderPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StreamBuilderPageState createState() =&gt; _StreamBuilderPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StreamBuilderPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StreamBuilderPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// StreamSubscription 用于管理监听，关闭暂停等</span></span><br><span class="line">  <span class="comment">// late StreamSubscription&lt;String&gt; subscription;</span></span><br><span class="line">  <span class="comment">// StreamController</span></span><br><span class="line">  <span class="keyword">late</span> StreamController&lt;<span class="built_in">String</span>&gt; streamController;</span><br><span class="line">  <span class="comment">// StreamSink用于发射事件</span></span><br><span class="line">  StreamSink&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> streamSink =&gt; streamController.sink;</span><br><span class="line">  <span class="comment">// 获取Stream，用于监听</span></span><br><span class="line">  Stream&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> streamData =&gt; streamController.stream;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> dispath() &#123;</span><br><span class="line">    <span class="comment">// 发射一个事件</span></span><br><span class="line">    streamSink.add(count.toString());</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    streamController = StreamController&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    streamSink.add(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subscription = streamData.listen((event) &#123;</span></span><br><span class="line">    <span class="comment">//   print(&quot;stream updated $event&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;, onError: (err) &#123;</span></span><br><span class="line">    <span class="comment">//   print(&quot;stream error: $err&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;, onDone: () &#123;</span></span><br><span class="line">    <span class="comment">//   print(&quot;stream done&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Stream Builder&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            StreamBuilder(</span><br><span class="line">              builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">String</span>&gt; snapshot) &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&quot;Result: <span class="subst">$&#123;snapshot.data&#125;</span>&quot;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              stream: streamData,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: dispath,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p><strong>StreamBuilder</strong> 与 <strong>FutureBuilder</strong>，两个都差不多，差别只是数据源一个是 <strong>Stream</strong> 一个是 <strong>Future</strong>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; mockNetwork() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Future.delayed(</span><br><span class="line">    <span class="built_in">Duration</span>(seconds: <span class="number">3</span>),</span><br><span class="line">    () =&gt; <span class="string">&quot;Data from network, u know...&quot;</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; counter() &#123;</span><br><span class="line">  <span class="keyword">return</span> Stream.periodic(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>), (i) &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamBuilderPage2</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StreamBuilderPage2(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Stream Builder test 2&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">        <span class="comment">// crossAxisAlignment: CrossAxisAlignment.start,</span></span><br><span class="line">        children: [</span><br><span class="line">          <span class="keyword">const</span> SizedBox(</span><br><span class="line">            height: <span class="number">20</span>,</span><br><span class="line">          ),</span><br><span class="line">          Center(</span><br><span class="line">            child: StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">              stream: counter(),</span><br><span class="line">              builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">int</span>&gt; snapshot) &#123;</span><br><span class="line">                <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Text(<span class="string">&quot;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">switch</span> (snapshot.connectionState) &#123;</span><br><span class="line">                  <span class="keyword">case</span> ConnectionState.none:</span><br><span class="line">                    <span class="keyword">return</span> Text(<span class="string">&quot;No stream&quot;</span>);</span><br><span class="line">                  <span class="keyword">case</span> ConnectionState.waiting:</span><br><span class="line">                    <span class="keyword">return</span> Text(<span class="string">&quot;Wating&quot;</span>);</span><br><span class="line">                  <span class="keyword">case</span> ConnectionState.active:</span><br><span class="line">                    <span class="keyword">return</span> Text(<span class="string">&quot;active: <span class="subst">$&#123;snapshot.data&#125;</span>&quot;</span>);</span><br><span class="line">                  <span class="keyword">case</span> ConnectionState.done:</span><br><span class="line">                    <span class="keyword">return</span> Text(<span class="string">&quot;Stream closed...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(</span><br><span class="line">            height: <span class="number">20</span>,</span><br><span class="line">          ),</span><br><span class="line">          FutureBuilder(</span><br><span class="line">            builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">String</span>&gt; snapshot) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">                <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Text(<span class="string">&quot;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> Text(<span class="string">&quot;Success: <span class="subst">$&#123;snapshot.data&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Loading</span></span><br><span class="line">                <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            future: mockNetwork(),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://book.flutterchina.club/chapter7/futurebuilder_and_streambuilder.html#_7-6-2-streambuilder">StreamBuilder</a></li></ol>]]></content>
    
    <summary type="html">
    
      StreamBuilder
    
    </summary>
    
    
      <category term="flutter" scheme="https://adoontheway.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点026 - Flutter状态管理之BLoC</title>
    <link href="https://adoontheway.github.io/2022/02/27/everydayprogress026/"/>
    <id>https://adoontheway.github.io/2022/02/27/everydayprogress026/</id>
    <published>2022-02-27T09:18:41.000Z</published>
    <updated>2022-02-27T09:53:58.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>本来Flutter状态管理用一篇来写完的，但是看起来有点长，所以分开来记录。</p><p>BLoC，Bussiness Logic Component，业务逻辑组件，参考1里面就是它的原理和介绍。</p><p>在pub.dev上我们可以看到两个bloc相关的包，一个是bloc，一个是flutter_bloc。前者是bloc的dart基本实现，后者是针对flutter的整合。所以，直接用后者就可以了。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="Hello-BLoC"><a href="#Hello-BLoC" class="headerlink" title="Hello BLoC"></a>Hello BLoC</h2><p>以下几步就可以简单的将BLoC导入咱们的hello world计数器项目。</p><h3 id="自定义-Cubit"><a href="#自定义-Cubit" class="headerlink" title="自定义 Cubit"></a>自定义 Cubit</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_bloc/flutter_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterCubit</span> <span class="keyword">extends</span> <span class="title">Cubit</span>&lt;<span class="title">int</span>&gt; </span>&#123;</span><br><span class="line">  CounterCubit() : <span class="keyword">super</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">void</span> increment() =&gt; emit(state + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">void</span> decrement() =&gt; emit(state - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咱们的CounterCubit继承的Cubit，Cubit其实只是一个抽象类，继承了BlocBase：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cubit</span>&lt;<span class="title">State</span>&gt; <span class="keyword">extends</span> <span class="title">BlocBase</span>&lt;<span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  Cubit(State initialState) : <span class="keyword">super</span>(initialState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，核心还是在BlocBase：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BlocBase</span>&lt;<span class="title">State</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">StateStreamableSource</span>&lt;<span class="title">State</span>&gt;, <span class="title">Emittable</span>&lt;<span class="title">State</span>&gt;, <span class="title">ErrorSink</span> </span></span><br></pre></td></tr></table></figure><p>BlocBase就两个实现，一个是上面的Cubit，一个是Bloc</p><h3 id="使用BlocBuilder进行build"><a href="#使用BlocBuilder进行build" class="headerlink" title="使用BlocBuilder进行build"></a>使用BlocBuilder进行build</h3><p>BlocBuilder是一个flutter widget，需要一个 bloc和一个 builder函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意，此处咱们不用StatefulWidget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterCubitPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CounterCubitPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Bloc Cubit Test&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: BlocBuilder&lt;CounterCubit, <span class="built_in">int</span>&gt;(</span><br><span class="line">        builder: (context, count) =&gt; Center(</span><br><span class="line">          child: Text(<span class="string">&quot;<span class="subst">$count</span>&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.end,</span><br><span class="line">        children: [</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">            onPressed: () =&gt; context.read&lt;CounterCubit&gt;().increment(),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(</span><br><span class="line">            height: <span class="number">4</span>,</span><br><span class="line">          ),</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            child: <span class="keyword">const</span> Icon(Icons.remove),</span><br><span class="line">            onPressed: () =&gt; context.read&lt;CounterCubit&gt;().decrement(),</span><br><span class="line">            heroTag: <span class="string">&quot;remove&quot;</span>,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MultiBlocProvider"><a href="#MultiBlocProvider" class="headerlink" title="MultiBlocProvider"></a>MultiBlocProvider</h3><p>如果会用到多个BLoC的时候，可以使用MultiBlocProvider进行整合。</p><p>from:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BlocProvider&lt;BlocA&gt;(</span><br><span class="line">  create: (BuildContext context) =&gt; BlocA(),</span><br><span class="line">  child: BlocProvider&lt;BlocB&gt;(</span><br><span class="line">    create: (BuildContext context) =&gt; BlocB(),</span><br><span class="line">    child: BlocProvider&lt;BlocC&gt;(</span><br><span class="line">      create: (BuildContext context) =&gt; BlocC(),</span><br><span class="line">      child: ChildA(),</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>to:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ultiBlocProvider(</span><br><span class="line">  providers: [</span><br><span class="line">    BlocProvider&lt;BlocA&gt;(</span><br><span class="line">      create: (BuildContext context) =&gt; BlocA(),</span><br><span class="line">    ),</span><br><span class="line">    BlocProvider&lt;BlocB&gt;(</span><br><span class="line">      create: (BuildContext context) =&gt; BlocB(),</span><br><span class="line">    ),</span><br><span class="line">    BlocProvider&lt;BlocC&gt;(</span><br><span class="line">      create: (BuildContext context) =&gt; BlocC(),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">  child: ChildA(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.didierboelens.com/2018/08/reactive-programming-streams-bloc/">响应式编程-流-bloc</a></li><li><a href="https://bloclibrary.dev/#/">bloc</a></li></ol>]]></content>
    
    <summary type="html">
    
      Flutter状态管理学习第二部分
    
    </summary>
    
    
      <category term="flutter" scheme="https://adoontheway.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点025 - Flutter状态管理之ChangeNotifier</title>
    <link href="https://adoontheway.github.io/2022/02/27/everydayprogress025/"/>
    <id>https://adoontheway.github.io/2022/02/27/everydayprogress025/</id>
    <published>2022-02-27T08:43:28.000Z</published>
    <updated>2022-02-27T09:21:58.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>在所有的 <strong>app</strong> 前端中，我们基本上都会把 <strong>app</strong> 状态到变动反馈到 <strong>ui</strong> 上来。例如，服务器数据推送， <em>locale</em> 变更，主题变更等。此文在于学习在 <strong>flutter</strong> 中如何监听数据或者状态变动，然后将他们实时更新到 <strong>ui</strong> 上。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="flutter-foundation-ChangeNotifier"><a href="#flutter-foundation-ChangeNotifier" class="headerlink" title="flutter.foundation.ChangeNotifier"></a>flutter.foundation.ChangeNotifier</h2><p><strong>ChangeNotifier</strong> 实现的是 <em>flutter.foundation.Listenable</em> ，它就是一个操作监听器的接口而已。监听器是用来通知客户端某对象已经更新过的。就包含两个需要实现的方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> addListener(VoidCallback listener);</span><br><span class="line"><span class="keyword">void</span> removeListener(VoidCallback listener);</span><br></pre></td></tr></table></figure><p>这个是ChangeNotifier最主要的成员变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;VoidCallback?&gt; _listeners = <span class="built_in">List</span>&lt;VoidCallback?&gt;.filled(<span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="meta">@protected</span></span><br><span class="line"><span class="meta">@visibleForTesting</span></span><br><span class="line"><span class="meta">@pragma</span>(<span class="string">&#x27;vm:notify-debugger-on-exception&#x27;</span>)</span><br><span class="line"><span class="keyword">void</span> notifyListeners() </span><br></pre></td></tr></table></figure><p>其实和 <strong>js</strong> 的 <strong>api</strong> 非常像。 <strong>addListener</strong> 对应 <strong>addEventListener</strong> ,<strong>removeListener</strong> 对应 <strong>removeEventListener</strong> , <strong>notifyListeners</strong> 对应<strong>dispatchEvent</strong> 。    </p><p>以下示范一下将 <em>hello world</em> 应用改为使用 <strong>ChangeNotifier</strong> ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> count =&gt; _count;</span><br><span class="line"></span><br><span class="line">  addCount() &#123;</span><br><span class="line">    _count++;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeNotifierPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ChangeNotifierPage(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;ChangeNotifierPage&gt; createState() =&gt; _ChangeNotifierPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ChangeNotifierPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ChangeNotifierPage</span>&gt; </span>&#123;</span><br><span class="line">  Counter _counter = Counter();</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _counter.addListener(() &#123;</span><br><span class="line">      setState(() &#123;&#125;);</span><br><span class="line">      <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;counter value:<span class="subst">$&#123;_counter.count&#125;</span>&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _counter.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;<span class="subst">$&#123;_counter.count&#125;</span>&#x27;</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          _counter.addCount();</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">      ), </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ChangeNotifier</strong> 的实现比较简单，据说效率不是很好，一个项目最多使用1-2个，导致它不能在中，大型应用中使用。</p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="extends-with-implements关键字的作用和区别"><a href="#extends-with-implements关键字的作用和区别" class="headerlink" title="extends,with,implements关键字的作用和区别"></a>extends,with,implements关键字的作用和区别</h2><ol><li><strong>extends</strong> : 继承，和 <strong>java</strong> 没啥区别，就是继承的意思，可以直接调用父类的方法，可以重写父类的方法</li><li><strong>with</strong> : 混入，其实就是复用 <strong>mixin</strong> ，可以直接调用 <strong>mixin</strong> 的方法，与 <strong>mixin</strong> 其实不是父子类的关系</li><li><strong>implements</strong> : 实现，在其他语言里就是实现某某接口的关键字， <strong>dart</strong> 里面没有接口<strong>interface</strong> 这个关键字，所以直接实现 <em>class</em> 里面的方法</li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://gitee.com/adoontheway/getx/blob/master/documentation/zh_CN/state_management.md">getx/doc/state_management</a></li></ol>]]></content>
    
    <summary type="html">
    
      Flutter状态管理学习第一部分
    
    </summary>
    
    
      <category term="flutter" scheme="https://adoontheway.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点023 - Python真的是强大</title>
    <link href="https://adoontheway.github.io/2022/01/20/everydayprogress024/"/>
    <id>https://adoontheway.github.io/2022/01/20/everydayprogress024/</id>
    <published>2022-01-20T13:54:55.000Z</published>
    <updated>2022-01-20T14:46:48.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近本来一直在做自己想做的app，然后发现开了头，没有了结尾。<br>仔细分析，发现是自己没有做好需求分析，项目规划，最致命的是没有做好原型设计，所以导致了最后的结果，虽然用<strong>Gitmind</strong> 做好了前期的记录，但是没有后续的整理和生成产品原型出来，导致现在只能暂时搁浅这个项目。然后突然发现年关将近，调研了一些市面上比较热门的万年历相关的信息，打算做一个万年历相关的 <strong>app</strong>。<br>现将目前的一些想法和心得记录于此。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="1-原型设计相关"><a href="#1-原型设计相关" class="headerlink" title="1 原型设计相关"></a>1 原型设计相关</h2><p>以前原型设计都是用的<strong>balsamiq mockups</strong>，非常不错的线稿原型设计工具，是之前做 <strong>Flash</strong> 开发的时候朋友推荐的。非常不错，但是现在收费了，囊中羞涩。最近看到adobe xd比较流行，个人版免费，自己之前用过不少的<em>adobe系列软件</em>，包括<strong>flash</strong> 也就是现在的<strong>adobe animation</strong>，所以对<em>adobe系列软件</em>的操作习惯比较习惯了。所以选择了他作为原型开发工具。<br>当然，目前只是做了很简单的原型设计，下一步需要根据官网上下载的 <strong>Material Design</strong> 风格和配色进行优化，很有可能还要用 <strong>Gimp</strong> 进行一些简单的<strong>ui</strong>设计和处理工作。<br><img data-src="xd.png" alt="adobe xd"></p><h2 id="2-数据相关"><a href="#2-数据相关" class="headerlink" title="2 数据相关"></a>2 数据相关</h2><p>数据爬取使用的是<strong>Python</strong>。原本打算用<strong>go</strong>来实现的，实际考察时使用的是 <em>colly</em> ，<strong>html</strong>解析是 <em>goquery</em> ，发现这个还是没有 <strong>python</strong> 使用 <em>requests+beautifulsoup</em> 来得简单和方便。<br>以下是数据爬取用到的库:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">somethinglikethis</span></span><br><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beautifulsoup4=4.10.0=pyha770c72_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">brotlipy=0.7.0=py38h96a0964_1003</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates=2021.10.8=h033912b_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">certifi=2021.10.8=py38h50d1736_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cffi=1.15.0=py38h1a44b6c_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">charset-normalizer=2.0.10=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cryptography=36.0.1=py38h56c4533_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">idna=3.1=pyhd3deb0d_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">libcxx=12.0.1=habf9029_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">libffi=3.4.2=h0d85af4_5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">libzlib=1.2.11=h9173be1_1013</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">loguru=0.5.3=py38h50d1736_3</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ncurses=6.2=h2e338ed_4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl=1.1.1l=h0d85af4_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip=21.3.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pycparser=2.21=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pymongo=4.0.1=py38ha048514_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pyopenssl=21.0.0=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pysocks=1.7.1=py38h50d1736_4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python=3.8.12=h17280f6_2_cpython</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python_abi=3.8=2_cp38</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">readline=8.1=h05e3726_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">requests=2.27.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">setuptools=60.5.0=py38h50d1736_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">six=1.16.0=pyh6c4a22f_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">soupsieve=2.3.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sqlite=3.37.0=h23a322b_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tk=8.6.11=h5dbffcc_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">urllib3=1.26.8=pyhd8ed1ab_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wheel=0.37.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">xz=5.2.5=haf1e3a3_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">zlib=1.2.11=h9173be1_1013</span></span><br><span class="line"><span class="attr">prefix:</span> <span class="string">/usr/local/anaconda3/envs/lunar</span></span><br></pre></td></tr></table></figure><h2 id="3-前端相关"><a href="#3-前端相关" class="headerlink" title="3 前端相关"></a>3 前端相关</h2><p>前端使用的是<strong>flutter</strong>。<br>最近看了一些别人的教程，颇有心得，跟以前怎么整理好一个<em>flutter项目</em>犯难有了很大的区别。<br>界面堆起来也是顺畅多了。<br>目前还有一些边角功能需要开发，以及屏幕适配需要去做，整体还是很顺利的。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">intl: ^0.17.0</span><br><span class="line">ionicons: ^0.1.2</span><br><span class="line">flutter_holo_date_picker: ^1.0.1+2</span><br><span class="line">share: ^2.0.4</span><br><span class="line"># Flutter 版微信登录/分享/支付 SDK</span><br><span class="line"># wechat_kit: ^3.0.1</span><br></pre></td></tr></table></figure><p>话说之前研究过 <strong>ionic</strong> ，试探性的去搜索了一下，还真有 <em>ionic 的 iconfont</em>。<br>项目简单，不知道会不会用到<strong>bloc</strong>或者<strong>getx</strong>。</p><h2 id="4-服务端相关"><a href="#4-服务端相关" class="headerlink" title="4 服务端相关"></a>4 服务端相关</h2><p>本来是打算<strong>golang</strong>的，然后打算借朋友的服务器用用，朋友是<strong>java</strong>大佬。<br><strong>golang</strong>肯定是够用的，但是今年一直都和朋友在正<em>springboot<em>全栈开发，所以打算系统的把</em>springboot<em>从0到1的整出来。<br>然而，这几天 *</em>python** 爬取数据看来，<strong>python</strong> 是极好用的，所以，身为一个纠结狂魔，我不仅想：*要不，用python试试？</em></p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="pymongo-遇到-id-重复的问题"><a href="#pymongo-遇到-id-重复的问题" class="headerlink" title="pymongo 遇到 _id 重复的问题"></a>pymongo 遇到 _id 重复的问题</h2><p>在数据存储方面，由于目前只是一些固定的数据，所以选择<strong>mongo</strong>来进行数据存储。对应的使用<em>pymongo</em>来操作<strong>mongodb</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uri = <span class="string">&quot;mongodb://%s:%s@%s&quot;</span> % (</span><br><span class="line">        quote_plus(<span class="string">&#x27;username&#x27;</span>), quote_plus(<span class="string">&#x27;password&#x27;</span>), <span class="string">&#x27;address:port&#x27;</span>)</span><br><span class="line">    client = pymongo.MongoClient(uri,maxPoolSize=<span class="number">10</span>,document_class=RawBSONDocument)</span><br></pre></td></tr></table></figure><p><strong><em>此处为何会设置 document_class 为 RawBSONDocument 呢？</em></strong><br>这是因为没有设置这个的时候，<br>系统会在 <em>collection.insert_one</em> 的时候判断插入的对象在不是<strong>RawBSONDocument</strong>并且没有 <strong>_id</strong> 字段的时候设置一个 <strong>_id</strong> ，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (<span class="built_in">isinstance</span>(document, RawBSONDocument) <span class="keyword">or</span> <span class="string">&quot;_id&quot;</span> <span class="keyword">in</span> document):</span><br><span class="line">    document[<span class="string">&quot;_id&quot;</span>] = ObjectId()</span><br></pre></td></tr></table></figure><p>而 <strong>ObjectId</strong> 是极其规律的</p><blockquote><p>An ObjectId is a 12-byte unique identifier consisting of:<br>    - a 4-byte value representing the seconds since the Unix epoch,<br>    - a 5-byte random value,<br>    - a 3-byte counter, starting with a random value.</p></blockquote><p>所以在使用多线程并发的情况下， <em>ObjectId是很容易重复的</em>。<br>因此，只要在此做此设置，就可以确保不会发生 <strong>_id</strong> 重复的问题。<br>并且，我们不需要这个字段，<strong>mongo</strong>自动生成的<strong>ObjectId</strong>够用了。<br><img data-src="mongo.png" alt="mongo"></p>]]></content>
    
    <summary type="html">
    
      最近在做自己的app，备忘一点点想法和心得
    
    </summary>
    
    
      <category term="python" scheme="https://adoontheway.github.io/tags/python/"/>
    
      <category term="flutter" scheme="https://adoontheway.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点023 - Flutter项目源码阅读笔记</title>
    <link href="https://adoontheway.github.io/2021/09/13/everydayprogress023/"/>
    <id>https://adoontheway.github.io/2021/09/13/everydayprogress023/</id>
    <published>2021-09-13T02:51:11.000Z</published>
    <updated>2021-09-13T03:36:03.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近打算开发一些app，做长期的打算。<br>但是做某些方面还是有些不解，所以看一下别人开源的比较成熟的代码来学习。</p><h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><h2 id="runZonedGuarded"><a href="#runZonedGuarded" class="headerlink" title="runZonedGuarded"></a>runZonedGuarded</h2><p>来自<code>dart:async</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Since</span>(<span class="string">&quot;2.8&quot;</span>)</span><br><span class="line">R? runZonedGuarded&lt;R&gt;(</span><br><span class="line">    R body(),</span><br><span class="line">    <span class="keyword">void</span> onError(</span><br><span class="line">        <span class="built_in">Object</span> error,</span><br><span class="line">        StackTrace stack</span><br><span class="line">    ),</span><br><span class="line">    &#123;<span class="built_in">Map</span>&lt;<span class="built_in">Object?</span>, <span class="built_in">Object?</span>&gt;? zoneValues,</span><br><span class="line">    ZoneSpecification? zoneSpecification&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在body本身的Zone范围内运行。  </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://api.flutter.dev/flutter/dart-async/runZonedGuarded.html">dart-async/runZonedGuarded.html</a></li><li><a href="https://api.flutter.dev/flutter/dart-async/Zone-class.html">Zone</a></li></ul><h2 id="sentry-flutter"><a href="#sentry-flutter" class="headerlink" title="sentry_flutter"></a>sentry_flutter</h2><p>flutter哨兵。用于激活自动报告错误，消息以及异常。  </p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li>自动追踪本地崩溃错误</li><li>离线存储事件</li><li>利用设备数据</li><li>等等</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>注册Sentry.io账号，然后在 <em><a href="http://sentry.io">http://sentry.io</a></em> 上获取一个DNS</li><li>安装此插件</li><li>利用上面获得的DNS初始化Sentry SDK<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通初始化</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> SentryFlutter.init(</span><br><span class="line">    (options) &#123;</span><br><span class="line">      options.dsn = <span class="string">&#x27;https://example@sentry.io/add-your-dsn-here&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Init your App.</span></span><br><span class="line">    appRunner: () =&gt; runApp(MyApp()),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在自己的错误空间内初始化</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; main() <span class="keyword">async</span> &#123;</span><br><span class="line">  runZonedGuarded(() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> SentryFlutter.init(</span><br><span class="line">      (options) &#123;</span><br><span class="line">        options.dsn = <span class="string">&#x27;https://example@sentry.io/add-your-dsn-here&#x27;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    runApp(MyApp());</span><br><span class="line">  &#125;, (exception, stackTrace) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Sentry.captureException(exception, stackTrace: stackTrace);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>还有更多的功能，需要详细阅读插件相关api等。  </li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://docs.sentry.io/platforms/flutter/">sentry.io</a></li><li><a href="https://pub.dev/documentation/sentry_flutter/latest/">api/init</a></li></ul><h2 id="get-dart"><a href="#get-dart" class="headerlink" title="get.dart"></a>get.dart</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>融合了高性能的状态管理，智能依赖注入，快速实用的路由管理。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="1-用GetMaterialApp代替MaterialApp"><a href="#1-用GetMaterialApp代替MaterialApp" class="headerlink" title="1.用GetMaterialApp代替MaterialApp"></a>1.用GetMaterialApp代替MaterialApp</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(GetMaterialApp(home: Home()</span><br></pre></td></tr></table></figure><h4 id="2-制作业务逻辑类，使用-【-obs】-将变量变为可观察的"><a href="#2-制作业务逻辑类，使用-【-obs】-将变量变为可观察的" class="headerlink" title="2. 制作业务逻辑类，使用 【.obs】 将变量变为可观察的"></a>2. 制作业务逻辑类，使用 【.obs】 将变量变为可观察的</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">GetxController</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0.</span>obs;</span><br><span class="line">  increment() =&gt; count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-使用StatelessWidget制作自定义视图可以节约一些内存"><a href="#3-使用StatelessWidget制作自定义视图可以节约一些内存" class="headerlink" title="3. 使用StatelessWidget制作自定义视图可以节约一些内存"></a>3. 使用StatelessWidget制作自定义视图可以节约一些内存</h4><p>有了Get之后，就不需要StatefulWidget了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 Get.put() 实例化你的逻辑类，这样他在所有的儿子节点中都可用</span></span><br><span class="line">    <span class="keyword">final</span> Controller c = Get.put(Controller());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      <span class="comment">// 通过 Obx(()=&gt; 在每次count更新的时候刷新 Text() </span></span><br><span class="line">      appBar: AppBar(title: Obx(() =&gt; Text(<span class="string">&quot;Clicks: <span class="subst">$&#123;c.count&#125;</span>&quot;</span>))),</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用一句简单的 Get.to() 替换8 行Navigator.push</span></span><br><span class="line">      body: Center(child: ElevatedButton(</span><br><span class="line">              child: Text(<span class="string">&quot;Go to Other&quot;</span>), onPressed: () =&gt; Get.to(Other()))),</span><br><span class="line">      floatingActionButton:</span><br><span class="line">          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在子节点中通过 Get 找到 Controller 实例</span></span><br><span class="line">  <span class="keyword">final</span> Controller c = Get.find();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(context)&#123;</span><br><span class="line">     <span class="comment">// 访问到他的变量</span></span><br><span class="line">     <span class="keyword">return</span> Scaffold(body: Center(child: Text(<span class="string">&quot;<span class="subst">$&#123;c.count&#125;</span>&quot;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>继承<strong>Translations</strong>，添加字典：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Messages</span> <span class="keyword">extends</span> <span class="title">Translations</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; <span class="keyword">get</span> keys =&gt; &#123;</span><br><span class="line">        <span class="string">&#x27;en_US&#x27;</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;de_DE&#x27;</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;Hallo Welt&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用也很简单：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加上.tr后缀就可以了</span></span><br><span class="line">Text(<span class="string">&#x27;title&#x27;</span>.tr);</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区域定位</span></span><br><span class="line"><span class="keyword">return</span> GetMaterialApp(</span><br><span class="line">    translations: Messages(), <span class="comment">// your translations</span></span><br><span class="line">    locale: Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>), <span class="comment">// translations will be displayed in that locale</span></span><br><span class="line">    fallbackLocale: Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;UK&#x27;</span>), <span class="comment">// specify the fallback locale in case an invalid locale is selected.</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更换区域</span></span><br><span class="line"><span class="keyword">var</span> locale = Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>);</span><br><span class="line">Get.updateLocale(locale);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统区域</span></span><br><span class="line"><span class="keyword">return</span> GetMaterialApp(</span><br><span class="line">    locale: Get.deviceLocale,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>依赖注入主要是通过 <strong>Get.Put</strong> 和 <strong>Get.lazyPut</strong> 实现。<br>其实这个所谓的依赖就是自定义的业务逻辑类。<br>还有更多封装好的功能，非常强大，需要区阅读文档。</p><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://pub.flutter-io.cn/packages/get">packages/get</a></li></ul>]]></content>
    
    <summary type="html">
    
      最近看一些开源的flutter app
    
    </summary>
    
    
      <category term="dart" scheme="https://adoontheway.github.io/tags/dart/"/>
    
      <category term="flutter" scheme="https://adoontheway.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点022 - Electron包装网站的问题</title>
    <link href="https://adoontheway.github.io/2021/08/25/everydayprogress022/"/>
    <id>https://adoontheway.github.io/2021/08/25/everydayprogress022/</id>
    <published>2021-08-25T12:02:38.000Z</published>
    <updated>2021-08-25T12:17:18.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近尝试了很多不错的在线工具，只是每次都要进入网站，有点麻烦，于是想到之前了解过的<em>electron</em>，尝试一下打包成本地应用。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="1-下载所有源文件"><a href="#1-下载所有源文件" class="headerlink" title="1.下载所有源文件"></a>1.下载所有源文件</h2><p>通过开发者工具，’copy all as Node.js fetch’，然后配合 <em>node-fetch</em> 库，将需要用到的资源下载到本地：<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAndWrite</span>(<span class="params">filepath,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;ok , here it is:&quot;</span>,filepath);</span><br><span class="line">    <span class="comment">//todo create directory loop  </span></span><br><span class="line">    <span class="keyword">const</span> dirpath = filepath.substr(<span class="number">0</span>,filepath.lastIndexOf(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(dirpath);</span><br><span class="line">    <span class="keyword">if</span>(!fs.existsSync(dirpath))&#123;</span><br><span class="line">        fs.mkdir(dirpath,&#123;<span class="attr">recursive</span>:<span class="literal">true</span>&#125;,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;mkdir err:&quot;</span>,err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> dest = fs.createWriteStream(filepath);</span><br><span class="line">            res.body.pipe(dest);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dest = fs.createWriteStream(filepath);</span><br><span class="line">    res.body.pipe(dest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个是主页</span></span><br><span class="line">fetch(<span class="string">&quot;https://material.io/resources/color/&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Chromium\&quot;;v=\&quot;92\&quot;, \&quot; Not A;Brand\&quot;;v=\&quot;99\&quot;, \&quot;Google Chrome\&quot;;v=\&quot;92\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;_ga=GA1.2.682063148.1629876102; _gid=GA1.2.1595024389.1629876102&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;referrerPolicy&quot;</span>: <span class="string">&quot;strict-origin-when-cross-origin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;cors&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    checkAndWrite(<span class="string">&#x27;./html/main.html&#x27;</span>,res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是其中的一个资源</span></span><br><span class="line">fetch(<span class="string">&quot;https://material.io/resources/color/styles/vendor-bab328c105.css&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/css,*/*;q=0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Chromium\&quot;;v=\&quot;92\&quot;, \&quot; Not A;Brand\&quot;;v=\&quot;99\&quot;, \&quot;Google Chrome\&quot;;v=\&quot;92\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;no-cors&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;_ga=GA1.2.682063148.1629876102; _gid=GA1.2.1595024389.1629876102; _gat=1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;referrer&quot;</span>: <span class="string">&quot;https://material.io/resources/color/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;referrerPolicy&quot;</span>: <span class="string">&quot;strict-origin-when-cross-origin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;cors&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    checkAndWrite(<span class="string">&#x27;./html/styles/vendor-bab328c105.css&#x27;</span>,res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="2-在electron中加载"><a href="#2-在electron中加载" class="headerlink" title="2.在electron中加载"></a>2.在electron中加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">1000</span>, <span class="attr">height</span>: <span class="number">800</span>, <span class="attr">webPreferences</span>:&#123;<span class="attr">webSecurity</span>:<span class="literal">false</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">mainWindow.loadURL(url.format(&#123;</span><br><span class="line">    pathname:path.join(__dirname,<span class="string">&quot;/html/main.html&quot;</span>),</span><br><span class="line">    protocol: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    slashes: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="3-注意的点"><a href="#3-注意的点" class="headerlink" title="3. 注意的点"></a>3. 注意的点</h2><ul><li>main.html 下载下来之后，需要将对应的资源路径改为*相对的本地路径</li><li>google-analysis相关的东西都去掉了，应该是用不上的</li><li>其他非<a href="https://material.io域名下的文件也要下载下来，并且到对应的文件里面去修改相对路径">https://material.io域名下的文件也要下载下来，并且到对应的文件里面去修改相对路径</a></li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img data-src="screen-1.png" alt="screenshot"></p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><ul><li><a href="https://gitee.com/adoontheway/color-tool">Gitee</a></li><li><a href="https://github.com/adoontheway/color-tool">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      将web工具通过electron打包成本地应用
    
    </summary>
    
    
      <category term="electron" scheme="https://adoontheway.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点021 - flutter的json转dart model问题</title>
    <link href="https://adoontheway.github.io/2021/08/25/everydayprogress021/"/>
    <id>https://adoontheway.github.io/2021/08/25/everydayprogress021/</id>
    <published>2021-08-25T06:12:50.000Z</published>
    <updated>2021-08-25T06:35:36.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在做一个app，以后续用来找工作可以拿出来看看。<br>试试自己到产品设计能力，前后端能力等等。<br>中间遇到到一些有值得记录的点全部记录在此。</p><h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><h2 id="json-model"><a href="#json-model" class="headerlink" title="json - model"></a>json - model</h2><p>本地 <em>json</em> 与 <em>model</em> 互转，主要用到了 <strong>json_serializiable</strong> <strong>json_annotation</strong> <strong>build_runner</strong>。<br>参考了<a href="https://book.flutterchina.club/chapter11/json_model.html">Json转Dart Model类</a></p><h3 id="meta版本依赖问题"><a href="#meta版本依赖问题" class="headerlink" title="meta版本依赖问题"></a>meta版本依赖问题</h3><p>由于使用的flutter版本是2.2.4，flutter_test与json_annotation同时依赖了不同版本的meta库，所以不得已，没有用上最新的json对应库：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">json_annotation:</span> <span class="string">^4.0.1,</span></span><br><span class="line"><span class="attr">json_serializable:</span> <span class="string">^4.1.4</span></span><br></pre></td></tr></table></figure><h3 id="类型拓展"><a href="#类型拓展" class="headerlink" title="类型拓展"></a>类型拓展</h3><p>以下是模版，在原版对基础上新增了构造器参数，不然新版本会提醒 <em>null safty</em> 问题。<br>由于<strong>vs code</strong>老是提醒有错误，所以这个文件命名为<em>template.tmpl</em>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line">%t</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;%s.g.dart&#x27;</span>;</span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> %<span class="title">s</span> </span>&#123;</span><br><span class="line">    %s(%c);</span><br><span class="line"></span><br><span class="line">    %s</span><br><span class="line">    <span class="keyword">factory</span> %s.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt; json) =&gt; _$%sFromJson(json);</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$%sToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是生成<em>model</em>的<em>dart</em>程序，新增了构造器参数和复杂类型的支持：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:path/path.dart&#x27;</span> <span class="keyword">as</span> path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TAG = <span class="string">&quot;\$&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> SRC = <span class="string">&quot;./json&quot;</span>; <span class="comment">//JSON 目录</span></span><br><span class="line"><span class="keyword">const</span> DIST = <span class="string">&quot;lib/models/&quot;</span>; <span class="comment">//输出model目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> walk() &#123;</span><br><span class="line">  <span class="comment">//遍历JSON目录生成模板</span></span><br><span class="line">  <span class="keyword">var</span> src = <span class="keyword">new</span> Directory(SRC);</span><br><span class="line">  <span class="keyword">var</span> list = src.listSync();</span><br><span class="line">  <span class="keyword">var</span> template = <span class="keyword">new</span> File(<span class="string">&quot;template/template.tmpl&quot;</span>).readAsStringSync();</span><br><span class="line">  File file;</span><br><span class="line">  list.forEach((f) &#123;</span><br><span class="line">    <span class="keyword">if</span> (FileSystemEntity.isFileSync(f.path)) &#123;</span><br><span class="line">      file = <span class="keyword">new</span> File(f.path);</span><br><span class="line">      <span class="keyword">var</span> paths = path.basename(f.path).split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">      <span class="built_in">String</span> name = paths.first;</span><br><span class="line">      <span class="keyword">if</span> (paths.last.toLowerCase() != <span class="string">&quot;json&quot;</span> || name.startsWith(<span class="string">&quot;_&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;_&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">//下面生成模板</span></span><br><span class="line">      <span class="keyword">var</span> map = json.decode(file.readAsStringSync());</span><br><span class="line">      <span class="comment">//为了避免重复导入相同的包，我们用Set来保存生成的import语句。</span></span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">set</span> = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">      <span class="built_in">StringBuffer</span> attrs = <span class="keyword">new</span> <span class="built_in">StringBuffer</span>();</span><br><span class="line">      <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; params = [];</span><br><span class="line">      (map <span class="keyword">as</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;).forEach((key, v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.startsWith(<span class="string">&quot;_&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        attrs.write(getType(v, <span class="keyword">set</span>, name));</span><br><span class="line">        attrs.write(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        attrs.write(key);</span><br><span class="line">        attrs.writeln(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        attrs.write(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">        params.add(<span class="string">&quot;required this.<span class="subst">$key</span>&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//新增的构造器参数部分</span></span><br><span class="line">      <span class="built_in">String</span> conParams = <span class="string">&quot;&#123;<span class="subst">$&#123;params.join(<span class="string">&quot;,&quot;</span>)&#125;</span>&#125;&quot;</span>;</span><br><span class="line">      <span class="built_in">String</span> className = name[<span class="number">0</span>].toUpperCase() + name.substring(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> dist = format(template, [</span><br><span class="line">        name,</span><br><span class="line">        className,</span><br><span class="line">        className,</span><br><span class="line">        attrs.toString(),</span><br><span class="line">        className,</span><br><span class="line">        className,</span><br><span class="line">        className</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">var</span> _<span class="keyword">import</span> = <span class="keyword">set</span>.join(<span class="string">&quot;;\r\n&quot;</span>);</span><br><span class="line">      _<span class="keyword">import</span> += _<span class="keyword">import</span>.isEmpty ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;;&quot;</span>;</span><br><span class="line">      dist = dist.replaceFirst(<span class="string">&quot;%t&quot;</span>, _<span class="keyword">import</span>);</span><br><span class="line">      dist = dist.replaceFirst(<span class="string">&quot;%c&quot;</span>, conParams);</span><br><span class="line">      <span class="comment">//将生成的模板输出</span></span><br><span class="line">      <span class="keyword">new</span> File(<span class="string">&quot;<span class="subst">$DIST</span><span class="subst">$name</span>.dart&quot;</span>).writeAsStringSync(dist);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> changeFirstChar(<span class="built_in">String</span> str, [<span class="built_in">bool</span> upper = <span class="keyword">true</span>]) &#123;</span><br><span class="line">  <span class="keyword">return</span> (upper ? str[<span class="number">0</span>].toUpperCase() : str[<span class="number">0</span>].toLowerCase()) +</span><br><span class="line">      str.substring(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将JSON类型转为对应的dart类型</span></span><br><span class="line"><span class="built_in">String</span> getType(v, <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; <span class="keyword">set</span>, <span class="built_in">String</span> current) &#123;</span><br><span class="line">  current = current.toLowerCase();</span><br><span class="line">  <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;bool&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;int&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;num&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">Map</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Map&lt;String,dynamic&gt;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">List</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;List&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="comment">//自定义类型的支持</span></span><br><span class="line">    <span class="keyword">if</span> (v.startsWith(<span class="string">&quot;<span class="subst">$TAG</span>&quot;</span>) &amp;&amp; v.endsWith(<span class="string">&quot;<span class="subst">$TAG</span>&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> v.substring(<span class="number">1</span>, v.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理特殊标志</span></span><br><span class="line">    <span class="keyword">if</span> (v.startsWith(<span class="string">&quot;<span class="subst">$TAG</span>[]&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">var</span> className = changeFirstChar(v.substring(<span class="number">3</span>), <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (className.toLowerCase() != current) &#123;</span><br><span class="line">        <span class="keyword">set</span>.add(<span class="string">&#x27;import &quot;<span class="subst">$className</span>.dart&quot;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;List&lt;<span class="subst">$&#123;changeFirstChar(className)&#125;</span>&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v.startsWith(TAG)) &#123;</span><br><span class="line">      <span class="keyword">var</span> fileName = changeFirstChar(v.substring(<span class="number">1</span>), <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (fileName.toLowerCase() != current) &#123;</span><br><span class="line">        <span class="keyword">set</span>.add(<span class="string">&#x27;import &quot;<span class="subst">$fileName</span>.dart&quot;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> changeFirstChar(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;String&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;String&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换模板占位符</span></span><br><span class="line"><span class="built_in">String</span> format(<span class="built_in">String</span> fmt, <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; params) &#123;</span><br><span class="line">  <span class="built_in">int</span> matchIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">String</span> replace(<span class="built_in">Match</span> m) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matchIndex &lt; params.length) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (m[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;%s&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> params[matchIndex++].toString();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Missing parameter for string format&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Invalid format string: &quot;</span> + m[<span class="number">0</span>].toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fmt.replaceAllMapped(<span class="string">&quot;%s&quot;</span>, replace);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  walk();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成脚本没有变动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dart ./lib/mo.dart</span><br><span class="line">flutter packages pub run build_runner build --delete-conflicting-outputs</span><br></pre></td></tr></table></figure><h3 id="实际结果"><a href="#实际结果" class="headerlink" title="实际结果"></a>实际结果</h3><h4 id="普通类型"><a href="#普通类型" class="headerlink" title="普通类型"></a>普通类型</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//record.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;拉屎&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;datetime&quot;</span>:<span class="string">&quot;$DateTime$&quot;</span>,<span class="comment">//复杂类型的传入方式</span></span><br><span class="line">    <span class="attr">&quot;cost&quot;</span>:<span class="number">30</span>,</span><br><span class="line">    <span class="attr">&quot;useful&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成结果：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;record.g.dart&#x27;</span>;</span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    Record(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.content,<span class="keyword">required</span> <span class="keyword">this</span>.datetime,<span class="keyword">required</span> <span class="keyword">this</span>.cost,<span class="keyword">required</span> <span class="keyword">this</span>.useful&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> content;</span><br><span class="line">    <span class="built_in">DateTime</span> datetime;</span><br><span class="line">    <span class="built_in">int</span> cost;</span><br><span class="line">    <span class="built_in">bool</span> useful;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">factory</span> Record.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt; json) =&gt; _$RecordFromJson(json);</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$RecordToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌入类型"><a href="#嵌入类型" class="headerlink" title="嵌入类型"></a>嵌入类型</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mock.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;targets&quot;</span>:<span class="string">&quot;$[]target&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;records&quot;</span>:<span class="string">&quot;$[]record&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;motivations&quot;</span>:<span class="string">&quot;$[]motivation&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成结果</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;target.dart&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;record.dart&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;motivation.dart&quot;</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;mock.g.dart&#x27;</span>;</span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mock</span> </span>&#123;</span><br><span class="line">    Mock(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.version,<span class="keyword">required</span> <span class="keyword">this</span>.targets,<span class="keyword">required</span> <span class="keyword">this</span>.records,<span class="keyword">required</span> <span class="keyword">this</span>.motivations&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> version;</span><br><span class="line">    <span class="built_in">List</span>&lt;Target&gt; targets;</span><br><span class="line">    <span class="built_in">List</span>&lt;Record&gt; records;</span><br><span class="line">    <span class="built_in">List</span>&lt;Motivation&gt; motivations;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">factory</span> Mock.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt; json) =&gt; _$MockFromJson(json);</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$MockToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      最近做自己的小工具用到到flutter相关到东西
    
    </summary>
    
    
      <category term="flutter" scheme="https://adoontheway.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点020 - docker上部署jar</title>
    <link href="https://adoontheway.github.io/2021/05/20/everydayprogress020/"/>
    <id>https://adoontheway.github.io/2021/05/20/everydayprogress020/</id>
    <published>2021-05-20T04:50:59.000Z</published>
    <updated>2021-08-25T06:36:51.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在尝试 #flutter# 开发，需要用到后端api，而原先的服务端上基于 <em>Springboot-v2</em> 的，不是完全的前后端分离项目，某些接口需要调整之后才能用，所以需要边调整 <em>api</em> 边开发<em>flutter app</em>。自己用的开发机上2014年左右的<strong>Mac Pro</strong>，同时开启过多的<strong>idea</strong>会很卡，所以想把服务端开发环境部署到<em>docker</em>上，这样就不质疑太卡。  </p><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><p>以下上具体实施步骤</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><em>idea</em> 中，运行’mvn:package’，得到发布的包</p><h2 id="获取java8镜像"><a href="#获取java8镜像" class="headerlink" title="获取java8镜像"></a>获取java8镜像</h2><p><code>shdocker pull java:8</code></p><h2 id="运行docker命令"><a href="#运行docker命令" class="headerlink" title="运行docker命令"></a>运行docker命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name yourname -p port_to_access:port_to_expose -v /local_absolute_path/hehe-2.0.0.RELEASE.jar:/usr/app.jar java:8 java -jar -Xms256m /usr/app.jar</span><br></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>后续如何更新此<em>jar</em>包，不知道能不能直接打包替换后重新启动</p>]]></content>
    
    <summary type="html">
    
      在docker上部署jar
    
    </summary>
    
    
      <category term="docker" scheme="https://adoontheway.github.io/tags/docker/"/>
    
      <category term="java" scheme="https://adoontheway.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>机器学习课程的第一天</title>
    <link href="https://adoontheway.github.io/2021/04/21/ml001/"/>
    <id>https://adoontheway.github.io/2021/04/21/ml001/</id>
    <published>2021-04-21T01:54:27.000Z</published>
    <updated>2023-05-25T10:26:16.067Z</updated>
    
    <content type="html"><![CDATA[<p>loss ： function的失误率，采用loss最低的那个function<br>supervise learning<br>reinforce learning</p><p>Network Architecture:定义函数的搜寻范围,包括RNN,CNN<br>RNN -&gt; Seq2seq<br>CNN -&gt; GAN</p><p>Regression-&gt;Classification-&gt;RNN/CNN<br>CNN -&gt; Unsupervised Learning(Auto-encoder) -&gt; Anomaly Detection -&gt; Transfer Learning (Domain Adversarial Learning) -&gt; Meta Learning -&gt; Life-long Learning -&gt; Reinforecement Learning<br>CNN -&gt; Explainable AI -&gt; Adversarial Attack -&gt; Network Compression<br>Explainable AI: 解释为何function可变辨识<br>Adversarial Attack:应对杂乱信息与攻击<br>Domain Adversarial Learning: 训练资料和测试资料分布很像，如果不接近呢<br>Meta Learning: Learn to Learn，让机器学习如何学习<br>Life-long Learning: 终身学习，又叫 Continuous Learning, Nerver End Learning</p><pre class="mermaid">graph TB    A((Regression));    B((Classification));    C>RNN];    D>CNN];    E[\Seq2seq\];    F[\GAN\];    G>Unsupervised Learning];    H>Anomaly Detection];    I>Transfer Learning];    J(Meta Learning);    K[\Life-long Learning\];    L[\Reinforecement Learning\];    M(Explainable AI);    N>Adversarial Attack];    O{Network Compression};    A-->B;    B-->C;    C-->E;    B-->D;    D-->G;    D-->F;    D-->M;    M-->N;    N-->O;    G-->H;    H-->I;    I-->J;    J-->K;    K-->L;</pre>]]></content>
    
    <summary type="html">
    
      在b站学习机器学习的第一天，总比打游戏好吧
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>每天进步一点点019 - golang开发im</title>
    <link href="https://adoontheway.github.io/2021/02/22/everydayprogress019/"/>
    <id>https://adoontheway.github.io/2021/02/22/everydayprogress019/</id>
    <published>2021-02-22T05:07:29.000Z</published>
    <updated>2023-05-25T10:26:16.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在网上下载并学习了一个golang开发im的完整课程。<br>完成课程后，做一些思考和总结有利于知识的巩固与消化。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><p>以下是对用到的知识，技术细节，个人新的体会等的一些回顾</p><h2 id="技术实施"><a href="#技术实施" class="headerlink" title="技术实施"></a>技术实施</h2><p>基础开发语言是golang<br>数据库是使用的mysql，用到了xorm来操作mysql<br>通讯用到了websocket/json<br>分布式通讯用的是udpsocket</p><h2 id="mysql-xorm"><a href="#mysql-xorm" class="headerlink" title="mysql/xorm"></a>mysql/xorm</h2><p>突然发现去年更新的win10可以使用docker，然后将docker安装在本机，利用docker来跑mysql。<br>发现xorm真好用啊，不用去写一堆sql来建表，但是过大的自由度是随之而来的其他代价，这个需要研究一下。后续也需要研究gorm和xorm的对比。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>学会了model/controller/service这样的分层：</p><ul><li>model放数据定义相关的，entity之类的东西</li><li>controller也就是直接的处理器，在web中就放接口api</li><li>service用于操作数据库查询，数据处理等逻辑的，更像mvc里面的m，通过使用model来给controller提供逻辑接口</li><li>在前后端分离中是不会有view层存在的，view一般都是前端打包好的一堆静态文件，之后直接放cdn就可以了<h2 id="分布式方案"><a href="#分布式方案" class="headerlink" title="分布式方案"></a>分布式方案</h2>学会了不同的分布式方案，之前在项目中使用的是通过第三方提供的服务中心【zookeeper】来注册/发现服务，这个项目里头用的的udp来发包，简单易懂，但是个人还是有一些不理解的地方。<h2 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h2>终于真正的用上了go module，在项目中使用。<br>对于当前项目子目录下的package的使用有了新的认识。</li></ul>]]></content>
    
    <summary type="html">
    
      golang开发im的课程总结
    
    </summary>
    
    
      <category term="golang" scheme="https://adoontheway.github.io/tags/golang/"/>
    
      <category term="xorm" scheme="https://adoontheway.github.io/tags/xorm/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点018 - 树莓派上用docker搭建mysql</title>
    <link href="https://adoontheway.github.io/2021/01/28/everydayprogress018/"/>
    <id>https://adoontheway.github.io/2021/01/28/everydayprogress018/</id>
    <published>2021-01-28T11:10:52.000Z</published>
    <updated>2023-05-25T10:26:16.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近发现所学甚多，忘得快，所以打算用<em>golang</em>来实现一些比较具像化的东西。特意下载一个<em>java</em>版本的商城来瞄瞄，顺便转译成<em>golang</em>。</p><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><p>去<a href="https://hub.docker.com/u/arm32v7/">docker hub arm32v7</a>上搜索mysql，然后筛选arm架构的，第一名是phpadmin，第二名叫做 <a href="https://hub.docker.com/r/biarms/mysql">biarms/mysql</a>,100k的下载量，20star，可以实施。  </p><h2 id="下载和安装镜像"><a href="#下载和安装镜像" class="headerlink" title="下载和安装镜像"></a>下载和安装镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull biarms/mysql</span><br></pre></td></tr></table></figure><h2 id="安装-compose"><a href="#安装-compose" class="headerlink" title="安装 compose"></a>安装 compose</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure><p>由于docker-compose只支持 <em>python 3.6</em> 以上的版本，而树莓派自带的是 <em>python 2.7</em>，所以需要升级一下。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不好搞，先搁置</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://hub.docker.com/_/mariadb">official Mariadb on docker hub</a></li><li><a href="https://www.jianshu.com/p/61b3119ab3f5">将树莓派内置的 Python2.7 升级成 Python3</a></li></ul><h1 id="Ps"><a href="#Ps" class="headerlink" title="Ps"></a>Ps</h1><ul><li><a href="https://blog.csdn.net/juneraid_huang/article/details/104637528">mac上移动硬盘只读的处理办法</a></li></ul>]]></content>
    
    <summary type="html">
    
      正在本地跑一个java商城，需要用到mysql，但是mac不够用了，所以...
    
    </summary>
    
    
      <category term="docker" scheme="https://adoontheway.github.io/tags/docker/"/>
    
      <category term="mysql" scheme="https://adoontheway.github.io/tags/mysql/"/>
    
      <category term="java" scheme="https://adoontheway.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点017 - Golang与Protobuf</title>
    <link href="https://adoontheway.github.io/2020/12/17/everydayprogress017/"/>
    <id>https://adoontheway.github.io/2020/12/17/everydayprogress017/</id>
    <published>2020-12-17T07:48:10.000Z</published>
    <updated>2023-05-25T10:26:16.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>虽然弄过很多遍了，但是每次都要去搜索。<br>本着好记性不如烂笔头的原则，今天记录下来。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="下载protobuf包"><a href="#下载protobuf包" class="headerlink" title="下载protobuf包"></a>下载protobuf包</h2><p>在github的protobuf官方上下载最新的release包，<code>protoc-$VERSION-$PLATFORM.zip</code>。<br>例如，我的macos下载的是 <strong>protoc-3.14.0-osx-x86_64.zip</strong> 。  </p><h2 id="解压并添加环境变量"><a href="#解压并添加环境变量" class="headerlink" title="解压并添加环境变量"></a>解压并添加环境变量</h2><p><code>vim ~/.bashrc</code><br>将protoc的bin目录加入环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PATH_TO_PROTO_BIN</span></span><br></pre></td></tr></table></figure><p>运行 <strong>source</strong> 命令之后就可以看到 <em>protoc</em> 可用了。  </p><h2 id="添加golang的protoc插件"><a href="#添加golang的protoc插件" class="headerlink" title="添加golang的protoc插件"></a>添加golang的protoc插件</h2><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go </span><br></pre></td></tr></table></figure><p>完成后可以在你的 <em>GOPATH/bin</em> 下看到一个 <strong>protoc-gen-go</strong> 文件。  </p><p>以上步骤之后，就可以在<strong>golang</strong>中开始使用<strong>protobuf</strong>了。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.14.0">!protobuf release</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/gotutorial">!google developer protobuf go tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      在Golang中使用Protobuf
    
    </summary>
    
    
      <category term="protobuf" scheme="https://adoontheway.github.io/tags/protobuf/"/>
    
      <category term="go" scheme="https://adoontheway.github.io/tags/go/"/>
    
  </entry>
  
</feed>
