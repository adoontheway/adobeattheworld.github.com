<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ados</title>
  
  <subtitle>a fullstack game worker</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://adoontheway.gitee.io/"/>
  <updated>2022-02-27T09:11:54.463Z</updated>
  <id>https://adoontheway.gitee.io/</id>
  
  <author>
    <name>ado</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天进步一点点025 - Flutter状态管理之ChangeNotifier</title>
    <link href="https://adoontheway.gitee.io/2022/02/27/everydayprogress025/"/>
    <id>https://adoontheway.gitee.io/2022/02/27/everydayprogress025/</id>
    <published>2022-02-27T08:43:28.000Z</published>
    <updated>2022-02-27T09:11:54.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>在所有的app前端中，我们基本上都会把app状态到变动反馈到ui上来。例如，服务器数据推送，locale变更，主题变更等。此文在于学习在flutter中如何监听数据或者状态变动，然后将他们实时更新到ui上。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="flutter-foundation-ChangeNotifier"><a href="#flutter-foundation-ChangeNotifier" class="headerlink" title="flutter.foundation.ChangeNotifier"></a>flutter.foundation.ChangeNotifier</h2><p>ChangeNotifier实现的是flutter.foundation.Listenable，它就是一个操作监听器的接口而已。监听器是用来通知客户端某对象已经更新过的。就包含两个需要实现的方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> addListener(VoidCallback listener);</span><br><span class="line"><span class="keyword">void</span> removeListener(VoidCallback listener);</span><br></pre></td></tr></table></figure><p>这个是ChangeNotifier最主要的成员变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;VoidCallback?&gt; _listeners = <span class="built_in">List</span>&lt;VoidCallback?&gt;.filled(<span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="meta">@protected</span></span><br><span class="line"><span class="meta">@visibleForTesting</span></span><br><span class="line"><span class="meta">@pragma</span>(<span class="string">&#x27;vm:notify-debugger-on-exception&#x27;</span>)</span><br><span class="line"><span class="keyword">void</span> notifyListeners() </span><br></pre></td></tr></table></figure><p>其实和js的接口非常像。 addListener 对应 addEventListener,removeListener对应removeEventListener,notifyListeners对应dispatchEvent。    </p><p>以下示范一下将hello world应用改为使用ChangeNotifier：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> count =&gt; _count;</span><br><span class="line"></span><br><span class="line">  addCount() &#123;</span><br><span class="line">    _count++;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeNotifierPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ChangeNotifierPage(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;ChangeNotifierPage&gt; createState() =&gt; _ChangeNotifierPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ChangeNotifierPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ChangeNotifierPage</span>&gt; </span>&#123;</span><br><span class="line">  Counter _counter = Counter();</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _counter.addListener(() &#123;</span><br><span class="line">      setState(() &#123;&#125;);</span><br><span class="line">      <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;counter value:<span class="subst">$&#123;_counter.count&#125;</span>&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _counter.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;<span class="subst">$&#123;_counter.count&#125;</span>&#x27;</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          _counter.addCount();</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">      ), </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ChangeNotifier的实现比较简单，据说效率不是很好，一个项目最多使用1-2个，导致它不能在中，大型应用中使用。</p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="extends-with-implements关键字的作用和区别"><a href="#extends-with-implements关键字的作用和区别" class="headerlink" title="extends,with,implements关键字的作用和区别"></a>extends,with,implements关键字的作用和区别</h2><ol><li>extends: 继承，和java没啥区别，就是继承的意思，可以直接调用父类的方法，可以重写父类的方法</li><li>with: 混入，其实就是复用mixin，可以直接调用mixin的方法，与mixin其实不是父子类的关系</li><li>implements: 实现，在其他语言里就是实现某某接口的关键字，dart里面没有接口interface这个关键字，所以直接实现class里面的方法<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1>1 <a href="https://gitee.com/adoontheway/getx/blob/master/documentation/zh_CN/state_management.md">getx/doc/state_management</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;在所有的app前端中，我们基本上都会把app状态到变动反馈到ui上来。例如，服务器数据推送，loca
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>每天进步一点点023 - Python真的是强大</title>
    <link href="https://adoontheway.gitee.io/2022/01/20/everydayprogress024/"/>
    <id>https://adoontheway.gitee.io/2022/01/20/everydayprogress024/</id>
    <published>2022-01-20T13:54:55.000Z</published>
    <updated>2022-01-20T14:46:48.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近本来一直在做自己想做的app，然后发现开了头，没有了结尾。<br>仔细分析，发现是自己没有做好需求分析，项目规划，最致命的是没有做好原型设计，所以导致了最后的结果，虽然用<strong>Gitmind</strong> 做好了前期的记录，但是没有后续的整理和生成产品原型出来，导致现在只能暂时搁浅这个项目。然后突然发现年关将近，调研了一些市面上比较热门的万年历相关的信息，打算做一个万年历相关的 <strong>app</strong>。<br>现将目前的一些想法和心得记录于此。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="1-原型设计相关"><a href="#1-原型设计相关" class="headerlink" title="1 原型设计相关"></a>1 原型设计相关</h2><p>以前原型设计都是用的<strong>balsamiq mockups</strong>，非常不错的线稿原型设计工具，是之前做 <strong>Flash</strong> 开发的时候朋友推荐的。非常不错，但是现在收费了，囊中羞涩。最近看到adobe xd比较流行，个人版免费，自己之前用过不少的<em>adobe系列软件</em>，包括<strong>flash</strong> 也就是现在的<strong>adobe animation</strong>，所以对<em>adobe系列软件</em>的操作习惯比较习惯了。所以选择了他作为原型开发工具。<br>当然，目前只是做了很简单的原型设计，下一步需要根据官网上下载的 <strong>Material Design</strong> 风格和配色进行优化，很有可能还要用 <strong>Gimp</strong> 进行一些简单的<strong>ui</strong>设计和处理工作。<br><img data-src="xd.png" alt="adobe xd"></p><h2 id="2-数据相关"><a href="#2-数据相关" class="headerlink" title="2 数据相关"></a>2 数据相关</h2><p>数据爬取使用的是<strong>Python</strong>。原本打算用<strong>go</strong>来实现的，实际考察时使用的是 <em>colly</em> ，<strong>html</strong>解析是 <em>goquery</em> ，发现这个还是没有 <strong>python</strong> 使用 <em>requests+beautifulsoup</em> 来得简单和方便。<br>以下是数据爬取用到的库:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">somethinglikethis</span></span><br><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beautifulsoup4=4.10.0=pyha770c72_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">brotlipy=0.7.0=py38h96a0964_1003</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates=2021.10.8=h033912b_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">certifi=2021.10.8=py38h50d1736_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cffi=1.15.0=py38h1a44b6c_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">charset-normalizer=2.0.10=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cryptography=36.0.1=py38h56c4533_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">idna=3.1=pyhd3deb0d_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">libcxx=12.0.1=habf9029_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">libffi=3.4.2=h0d85af4_5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">libzlib=1.2.11=h9173be1_1013</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">loguru=0.5.3=py38h50d1736_3</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ncurses=6.2=h2e338ed_4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl=1.1.1l=h0d85af4_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip=21.3.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pycparser=2.21=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pymongo=4.0.1=py38ha048514_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pyopenssl=21.0.0=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pysocks=1.7.1=py38h50d1736_4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python=3.8.12=h17280f6_2_cpython</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python_abi=3.8=2_cp38</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">readline=8.1=h05e3726_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">requests=2.27.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">setuptools=60.5.0=py38h50d1736_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">six=1.16.0=pyh6c4a22f_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">soupsieve=2.3.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sqlite=3.37.0=h23a322b_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tk=8.6.11=h5dbffcc_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">urllib3=1.26.8=pyhd8ed1ab_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wheel=0.37.1=pyhd8ed1ab_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">xz=5.2.5=haf1e3a3_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">zlib=1.2.11=h9173be1_1013</span></span><br><span class="line"><span class="attr">prefix:</span> <span class="string">/usr/local/anaconda3/envs/lunar</span></span><br></pre></td></tr></table></figure><h2 id="3-前端相关"><a href="#3-前端相关" class="headerlink" title="3 前端相关"></a>3 前端相关</h2><p>前端使用的是<strong>flutter</strong>。<br>最近看了一些别人的教程，颇有心得，跟以前怎么整理好一个<em>flutter项目</em>犯难有了很大的区别。<br>界面堆起来也是顺畅多了。<br>目前还有一些边角功能需要开发，以及屏幕适配需要去做，整体还是很顺利的。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">intl: ^0.17.0</span><br><span class="line">ionicons: ^0.1.2</span><br><span class="line">flutter_holo_date_picker: ^1.0.1+2</span><br><span class="line">share: ^2.0.4</span><br><span class="line"># Flutter 版微信登录/分享/支付 SDK</span><br><span class="line"># wechat_kit: ^3.0.1</span><br></pre></td></tr></table></figure><p>话说之前研究过 <strong>ionic</strong> ，试探性的去搜索了一下，还真有 <em>ionic 的 iconfont</em>。<br>项目简单，不知道会不会用到<strong>bloc</strong>或者<strong>getx</strong>。</p><h2 id="4-服务端相关"><a href="#4-服务端相关" class="headerlink" title="4 服务端相关"></a>4 服务端相关</h2><p>本来是打算<strong>golang</strong>的，然后打算借朋友的服务器用用，朋友是<strong>java</strong>大佬。<br><strong>golang</strong>肯定是够用的，但是今年一直都和朋友在正<em>springboot<em>全栈开发，所以打算系统的把</em>springboot<em>从0到1的整出来。<br>然而，这几天 *</em>python** 爬取数据看来，<strong>python</strong> 是极好用的，所以，身为一个纠结狂魔，我不仅想：*要不，用python试试？</em></p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="pymongo-遇到-id-重复的问题"><a href="#pymongo-遇到-id-重复的问题" class="headerlink" title="pymongo 遇到 _id 重复的问题"></a>pymongo 遇到 _id 重复的问题</h2><p>在数据存储方面，由于目前只是一些固定的数据，所以选择<strong>mongo</strong>来进行数据存储。对应的使用<em>pymongo</em>来操作<strong>mongodb</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uri = <span class="string">&quot;mongodb://%s:%s@%s&quot;</span> % (</span><br><span class="line">        quote_plus(<span class="string">&#x27;username&#x27;</span>), quote_plus(<span class="string">&#x27;password&#x27;</span>), <span class="string">&#x27;address:port&#x27;</span>)</span><br><span class="line">    client = pymongo.MongoClient(uri,maxPoolSize=<span class="number">10</span>,document_class=RawBSONDocument)</span><br></pre></td></tr></table></figure><p><strong><em>此处为何会设置 document_class 为 RawBSONDocument 呢？</em></strong><br>这是因为没有设置这个的时候，<br>系统会在 <em>collection.insert_one</em> 的时候判断插入的对象在不是<strong>RawBSONDocument</strong>并且没有 <strong>_id</strong> 字段的时候设置一个 <strong>_id</strong> ，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (<span class="built_in">isinstance</span>(document, RawBSONDocument) <span class="keyword">or</span> <span class="string">&quot;_id&quot;</span> <span class="keyword">in</span> document):</span><br><span class="line">    document[<span class="string">&quot;_id&quot;</span>] = ObjectId()</span><br></pre></td></tr></table></figure><p>而 <strong>ObjectId</strong> 是极其规律的</p><blockquote><p>An ObjectId is a 12-byte unique identifier consisting of:<br>    - a 4-byte value representing the seconds since the Unix epoch,<br>    - a 5-byte random value,<br>    - a 3-byte counter, starting with a random value.</p></blockquote><p>所以在使用多线程并发的情况下， <em>ObjectId是很容易重复的</em>。<br>因此，只要在此做此设置，就可以确保不会发生 <strong>_id</strong> 重复的问题。<br>并且，我们不需要这个字段，<strong>mongo</strong>自动生成的<strong>ObjectId</strong>够用了。<br><img data-src="mongo.png" alt="mongo"></p>]]></content>
    
    <summary type="html">
    
      最近在做自己的app，备忘一点点想法和心得
    
    </summary>
    
    
      <category term="python" scheme="https://adoontheway.gitee.io/tags/python/"/>
    
      <category term="flutter" scheme="https://adoontheway.gitee.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点023 - Flutter项目源码阅读笔记</title>
    <link href="https://adoontheway.gitee.io/2021/09/13/everydayprogress023/"/>
    <id>https://adoontheway.gitee.io/2021/09/13/everydayprogress023/</id>
    <published>2021-09-13T02:51:11.000Z</published>
    <updated>2021-09-13T03:36:03.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近打算开发一些app，做长期的打算。<br>但是做某些方面还是有些不解，所以看一下别人开源的比较成熟的代码来学习。</p><h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><h2 id="runZonedGuarded"><a href="#runZonedGuarded" class="headerlink" title="runZonedGuarded"></a>runZonedGuarded</h2><p>来自<code>dart:async</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Since</span>(<span class="string">&quot;2.8&quot;</span>)</span><br><span class="line">R? runZonedGuarded&lt;R&gt;(</span><br><span class="line">    R body(),</span><br><span class="line">    <span class="keyword">void</span> onError(</span><br><span class="line">        <span class="built_in">Object</span> error,</span><br><span class="line">        StackTrace stack</span><br><span class="line">    ),</span><br><span class="line">    &#123;<span class="built_in">Map</span>&lt;<span class="built_in">Object?</span>, <span class="built_in">Object?</span>&gt;? zoneValues,</span><br><span class="line">    ZoneSpecification? zoneSpecification&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在body本身的Zone范围内运行。  </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://api.flutter.dev/flutter/dart-async/runZonedGuarded.html">dart-async/runZonedGuarded.html</a></li><li><a href="https://api.flutter.dev/flutter/dart-async/Zone-class.html">Zone</a></li></ul><h2 id="sentry-flutter"><a href="#sentry-flutter" class="headerlink" title="sentry_flutter"></a>sentry_flutter</h2><p>flutter哨兵。用于激活自动报告错误，消息以及异常。  </p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li>自动追踪本地崩溃错误</li><li>离线存储事件</li><li>利用设备数据</li><li>等等</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>注册Sentry.io账号，然后在 <em><a href="http://sentry.io">http://sentry.io</a></em> 上获取一个DNS</li><li>安装此插件</li><li>利用上面获得的DNS初始化Sentry SDK<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通初始化</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> SentryFlutter.init(</span><br><span class="line">    (options) &#123;</span><br><span class="line">      options.dsn = <span class="string">&#x27;https://example@sentry.io/add-your-dsn-here&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Init your App.</span></span><br><span class="line">    appRunner: () =&gt; runApp(MyApp()),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在自己的错误空间内初始化</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; main() <span class="keyword">async</span> &#123;</span><br><span class="line">  runZonedGuarded(() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> SentryFlutter.init(</span><br><span class="line">      (options) &#123;</span><br><span class="line">        options.dsn = <span class="string">&#x27;https://example@sentry.io/add-your-dsn-here&#x27;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    runApp(MyApp());</span><br><span class="line">  &#125;, (exception, stackTrace) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Sentry.captureException(exception, stackTrace: stackTrace);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>还有更多的功能，需要详细阅读插件相关api等。  </li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://docs.sentry.io/platforms/flutter/">sentry.io</a></li><li><a href="https://pub.dev/documentation/sentry_flutter/latest/">api/init</a></li></ul><h2 id="get-dart"><a href="#get-dart" class="headerlink" title="get.dart"></a>get.dart</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>融合了高性能的状态管理，智能依赖注入，快速实用的路由管理。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="1-用GetMaterialApp代替MaterialApp"><a href="#1-用GetMaterialApp代替MaterialApp" class="headerlink" title="1.用GetMaterialApp代替MaterialApp"></a>1.用GetMaterialApp代替MaterialApp</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(GetMaterialApp(home: Home()</span><br></pre></td></tr></table></figure><h4 id="2-制作业务逻辑类，使用-【-obs】-将变量变为可观察的"><a href="#2-制作业务逻辑类，使用-【-obs】-将变量变为可观察的" class="headerlink" title="2. 制作业务逻辑类，使用 【.obs】 将变量变为可观察的"></a>2. 制作业务逻辑类，使用 【.obs】 将变量变为可观察的</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">GetxController</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0.</span>obs;</span><br><span class="line">  increment() =&gt; count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-使用StatelessWidget制作自定义视图可以节约一些内存"><a href="#3-使用StatelessWidget制作自定义视图可以节约一些内存" class="headerlink" title="3. 使用StatelessWidget制作自定义视图可以节约一些内存"></a>3. 使用StatelessWidget制作自定义视图可以节约一些内存</h4><p>有了Get之后，就不需要StatefulWidget了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 Get.put() 实例化你的逻辑类，这样他在所有的儿子节点中都可用</span></span><br><span class="line">    <span class="keyword">final</span> Controller c = Get.put(Controller());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      <span class="comment">// 通过 Obx(()=&gt; 在每次count更新的时候刷新 Text() </span></span><br><span class="line">      appBar: AppBar(title: Obx(() =&gt; Text(<span class="string">&quot;Clicks: <span class="subst">$&#123;c.count&#125;</span>&quot;</span>))),</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用一句简单的 Get.to() 替换8 行Navigator.push</span></span><br><span class="line">      body: Center(child: ElevatedButton(</span><br><span class="line">              child: Text(<span class="string">&quot;Go to Other&quot;</span>), onPressed: () =&gt; Get.to(Other()))),</span><br><span class="line">      floatingActionButton:</span><br><span class="line">          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在子节点中通过 Get 找到 Controller 实例</span></span><br><span class="line">  <span class="keyword">final</span> Controller c = Get.find();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(context)&#123;</span><br><span class="line">     <span class="comment">// 访问到他的变量</span></span><br><span class="line">     <span class="keyword">return</span> Scaffold(body: Center(child: Text(<span class="string">&quot;<span class="subst">$&#123;c.count&#125;</span>&quot;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>继承<strong>Translations</strong>，添加字典：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Messages</span> <span class="keyword">extends</span> <span class="title">Translations</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; <span class="keyword">get</span> keys =&gt; &#123;</span><br><span class="line">        <span class="string">&#x27;en_US&#x27;</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;de_DE&#x27;</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;Hallo Welt&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用也很简单：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加上.tr后缀就可以了</span></span><br><span class="line">Text(<span class="string">&#x27;title&#x27;</span>.tr);</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区域定位</span></span><br><span class="line"><span class="keyword">return</span> GetMaterialApp(</span><br><span class="line">    translations: Messages(), <span class="comment">// your translations</span></span><br><span class="line">    locale: Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>), <span class="comment">// translations will be displayed in that locale</span></span><br><span class="line">    fallbackLocale: Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;UK&#x27;</span>), <span class="comment">// specify the fallback locale in case an invalid locale is selected.</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更换区域</span></span><br><span class="line"><span class="keyword">var</span> locale = Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>);</span><br><span class="line">Get.updateLocale(locale);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统区域</span></span><br><span class="line"><span class="keyword">return</span> GetMaterialApp(</span><br><span class="line">    locale: Get.deviceLocale,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>依赖注入主要是通过 <strong>Get.Put</strong> 和 <strong>Get.lazyPut</strong> 实现。<br>其实这个所谓的依赖就是自定义的业务逻辑类。<br>还有更多封装好的功能，非常强大，需要区阅读文档。</p><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://pub.flutter-io.cn/packages/get">packages/get</a></li></ul>]]></content>
    
    <summary type="html">
    
      最近看一些开源的flutter app
    
    </summary>
    
    
      <category term="dart" scheme="https://adoontheway.gitee.io/tags/dart/"/>
    
      <category term="flutter" scheme="https://adoontheway.gitee.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点022 - Electron包装网站的问题</title>
    <link href="https://adoontheway.gitee.io/2021/08/25/everydayprogress022/"/>
    <id>https://adoontheway.gitee.io/2021/08/25/everydayprogress022/</id>
    <published>2021-08-25T12:02:38.000Z</published>
    <updated>2021-08-25T12:17:18.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近尝试了很多不错的在线工具，只是每次都要进入网站，有点麻烦，于是想到之前了解过的<em>electron</em>，尝试一下打包成本地应用。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="1-下载所有源文件"><a href="#1-下载所有源文件" class="headerlink" title="1.下载所有源文件"></a>1.下载所有源文件</h2><p>通过开发者工具，’copy all as Node.js fetch’，然后配合 <em>node-fetch</em> 库，将需要用到的资源下载到本地：<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAndWrite</span>(<span class="params">filepath,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;ok , here it is:&quot;</span>,filepath);</span><br><span class="line">    <span class="comment">//todo create directory loop  </span></span><br><span class="line">    <span class="keyword">const</span> dirpath = filepath.substr(<span class="number">0</span>,filepath.lastIndexOf(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(dirpath);</span><br><span class="line">    <span class="keyword">if</span>(!fs.existsSync(dirpath))&#123;</span><br><span class="line">        fs.mkdir(dirpath,&#123;<span class="attr">recursive</span>:<span class="literal">true</span>&#125;,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;mkdir err:&quot;</span>,err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> dest = fs.createWriteStream(filepath);</span><br><span class="line">            res.body.pipe(dest);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dest = fs.createWriteStream(filepath);</span><br><span class="line">    res.body.pipe(dest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个是主页</span></span><br><span class="line">fetch(<span class="string">&quot;https://material.io/resources/color/&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Chromium\&quot;;v=\&quot;92\&quot;, \&quot; Not A;Brand\&quot;;v=\&quot;99\&quot;, \&quot;Google Chrome\&quot;;v=\&quot;92\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;_ga=GA1.2.682063148.1629876102; _gid=GA1.2.1595024389.1629876102&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;referrerPolicy&quot;</span>: <span class="string">&quot;strict-origin-when-cross-origin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;cors&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    checkAndWrite(<span class="string">&#x27;./html/main.html&#x27;</span>,res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是其中的一个资源</span></span><br><span class="line">fetch(<span class="string">&quot;https://material.io/resources/color/styles/vendor-bab328c105.css&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/css,*/*;q=0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Chromium\&quot;;v=\&quot;92\&quot;, \&quot; Not A;Brand\&quot;;v=\&quot;99\&quot;, \&quot;Google Chrome\&quot;;v=\&quot;92\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;no-cors&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;_ga=GA1.2.682063148.1629876102; _gid=GA1.2.1595024389.1629876102; _gat=1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;referrer&quot;</span>: <span class="string">&quot;https://material.io/resources/color/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;referrerPolicy&quot;</span>: <span class="string">&quot;strict-origin-when-cross-origin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;cors&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    checkAndWrite(<span class="string">&#x27;./html/styles/vendor-bab328c105.css&#x27;</span>,res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="2-在electron中加载"><a href="#2-在electron中加载" class="headerlink" title="2.在electron中加载"></a>2.在electron中加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">1000</span>, <span class="attr">height</span>: <span class="number">800</span>, <span class="attr">webPreferences</span>:&#123;<span class="attr">webSecurity</span>:<span class="literal">false</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">mainWindow.loadURL(url.format(&#123;</span><br><span class="line">    pathname:path.join(__dirname,<span class="string">&quot;/html/main.html&quot;</span>),</span><br><span class="line">    protocol: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    slashes: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="3-注意的点"><a href="#3-注意的点" class="headerlink" title="3. 注意的点"></a>3. 注意的点</h2><ul><li>main.html 下载下来之后，需要将对应的资源路径改为*相对的本地路径</li><li>google-analysis相关的东西都去掉了，应该是用不上的</li><li>其他非<a href="https://material.io域名下的文件也要下载下来，并且到对应的文件里面去修改相对路径">https://material.io域名下的文件也要下载下来，并且到对应的文件里面去修改相对路径</a></li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img data-src="screen-1.png" alt="screenshot"></p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><ul><li><a href="https://gitee.com/adoontheway/color-tool">Gitee</a></li><li><a href="https://github.com/adoontheway/color-tool">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      将web工具通过electron打包成本地应用
    
    </summary>
    
    
      <category term="electron" scheme="https://adoontheway.gitee.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点021 - flutter的json转dart model问题</title>
    <link href="https://adoontheway.gitee.io/2021/08/25/everydayprogress021/"/>
    <id>https://adoontheway.gitee.io/2021/08/25/everydayprogress021/</id>
    <published>2021-08-25T06:12:50.000Z</published>
    <updated>2021-08-25T06:35:36.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在做一个app，以后续用来找工作可以拿出来看看。<br>试试自己到产品设计能力，前后端能力等等。<br>中间遇到到一些有值得记录的点全部记录在此。</p><h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><h2 id="json-model"><a href="#json-model" class="headerlink" title="json - model"></a>json - model</h2><p>本地 <em>json</em> 与 <em>model</em> 互转，主要用到了 <strong>json_serializiable</strong> <strong>json_annotation</strong> <strong>build_runner</strong>。<br>参考了<a href="https://book.flutterchina.club/chapter11/json_model.html">Json转Dart Model类</a></p><h3 id="meta版本依赖问题"><a href="#meta版本依赖问题" class="headerlink" title="meta版本依赖问题"></a>meta版本依赖问题</h3><p>由于使用的flutter版本是2.2.4，flutter_test与json_annotation同时依赖了不同版本的meta库，所以不得已，没有用上最新的json对应库：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">json_annotation:</span> <span class="string">^4.0.1,</span></span><br><span class="line"><span class="attr">json_serializable:</span> <span class="string">^4.1.4</span></span><br></pre></td></tr></table></figure><h3 id="类型拓展"><a href="#类型拓展" class="headerlink" title="类型拓展"></a>类型拓展</h3><p>以下是模版，在原版对基础上新增了构造器参数，不然新版本会提醒 <em>null safty</em> 问题。<br>由于<strong>vs code</strong>老是提醒有错误，所以这个文件命名为<em>template.tmpl</em>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line">%t</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;%s.g.dart&#x27;</span>;</span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> %<span class="title">s</span> </span>&#123;</span><br><span class="line">    %s(%c);</span><br><span class="line"></span><br><span class="line">    %s</span><br><span class="line">    <span class="keyword">factory</span> %s.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt; json) =&gt; _$%sFromJson(json);</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$%sToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是生成<em>model</em>的<em>dart</em>程序，新增了构造器参数和复杂类型的支持：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:path/path.dart&#x27;</span> <span class="keyword">as</span> path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TAG = <span class="string">&quot;\$&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> SRC = <span class="string">&quot;./json&quot;</span>; <span class="comment">//JSON 目录</span></span><br><span class="line"><span class="keyword">const</span> DIST = <span class="string">&quot;lib/models/&quot;</span>; <span class="comment">//输出model目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> walk() &#123;</span><br><span class="line">  <span class="comment">//遍历JSON目录生成模板</span></span><br><span class="line">  <span class="keyword">var</span> src = <span class="keyword">new</span> Directory(SRC);</span><br><span class="line">  <span class="keyword">var</span> list = src.listSync();</span><br><span class="line">  <span class="keyword">var</span> template = <span class="keyword">new</span> File(<span class="string">&quot;template/template.tmpl&quot;</span>).readAsStringSync();</span><br><span class="line">  File file;</span><br><span class="line">  list.forEach((f) &#123;</span><br><span class="line">    <span class="keyword">if</span> (FileSystemEntity.isFileSync(f.path)) &#123;</span><br><span class="line">      file = <span class="keyword">new</span> File(f.path);</span><br><span class="line">      <span class="keyword">var</span> paths = path.basename(f.path).split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">      <span class="built_in">String</span> name = paths.first;</span><br><span class="line">      <span class="keyword">if</span> (paths.last.toLowerCase() != <span class="string">&quot;json&quot;</span> || name.startsWith(<span class="string">&quot;_&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;_&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">//下面生成模板</span></span><br><span class="line">      <span class="keyword">var</span> map = json.decode(file.readAsStringSync());</span><br><span class="line">      <span class="comment">//为了避免重复导入相同的包，我们用Set来保存生成的import语句。</span></span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">set</span> = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">      <span class="built_in">StringBuffer</span> attrs = <span class="keyword">new</span> <span class="built_in">StringBuffer</span>();</span><br><span class="line">      <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; params = [];</span><br><span class="line">      (map <span class="keyword">as</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;).forEach((key, v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.startsWith(<span class="string">&quot;_&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        attrs.write(getType(v, <span class="keyword">set</span>, name));</span><br><span class="line">        attrs.write(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        attrs.write(key);</span><br><span class="line">        attrs.writeln(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        attrs.write(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">        params.add(<span class="string">&quot;required this.<span class="subst">$key</span>&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//新增的构造器参数部分</span></span><br><span class="line">      <span class="built_in">String</span> conParams = <span class="string">&quot;&#123;<span class="subst">$&#123;params.join(<span class="string">&quot;,&quot;</span>)&#125;</span>&#125;&quot;</span>;</span><br><span class="line">      <span class="built_in">String</span> className = name[<span class="number">0</span>].toUpperCase() + name.substring(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> dist = format(template, [</span><br><span class="line">        name,</span><br><span class="line">        className,</span><br><span class="line">        className,</span><br><span class="line">        attrs.toString(),</span><br><span class="line">        className,</span><br><span class="line">        className,</span><br><span class="line">        className</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">var</span> _<span class="keyword">import</span> = <span class="keyword">set</span>.join(<span class="string">&quot;;\r\n&quot;</span>);</span><br><span class="line">      _<span class="keyword">import</span> += _<span class="keyword">import</span>.isEmpty ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;;&quot;</span>;</span><br><span class="line">      dist = dist.replaceFirst(<span class="string">&quot;%t&quot;</span>, _<span class="keyword">import</span>);</span><br><span class="line">      dist = dist.replaceFirst(<span class="string">&quot;%c&quot;</span>, conParams);</span><br><span class="line">      <span class="comment">//将生成的模板输出</span></span><br><span class="line">      <span class="keyword">new</span> File(<span class="string">&quot;<span class="subst">$DIST</span><span class="subst">$name</span>.dart&quot;</span>).writeAsStringSync(dist);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> changeFirstChar(<span class="built_in">String</span> str, [<span class="built_in">bool</span> upper = <span class="keyword">true</span>]) &#123;</span><br><span class="line">  <span class="keyword">return</span> (upper ? str[<span class="number">0</span>].toUpperCase() : str[<span class="number">0</span>].toLowerCase()) +</span><br><span class="line">      str.substring(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将JSON类型转为对应的dart类型</span></span><br><span class="line"><span class="built_in">String</span> getType(v, <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; <span class="keyword">set</span>, <span class="built_in">String</span> current) &#123;</span><br><span class="line">  current = current.toLowerCase();</span><br><span class="line">  <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;bool&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;int&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;num&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">Map</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Map&lt;String,dynamic&gt;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">List</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;List&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="comment">//自定义类型的支持</span></span><br><span class="line">    <span class="keyword">if</span> (v.startsWith(<span class="string">&quot;<span class="subst">$TAG</span>&quot;</span>) &amp;&amp; v.endsWith(<span class="string">&quot;<span class="subst">$TAG</span>&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> v.substring(<span class="number">1</span>, v.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理特殊标志</span></span><br><span class="line">    <span class="keyword">if</span> (v.startsWith(<span class="string">&quot;<span class="subst">$TAG</span>[]&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">var</span> className = changeFirstChar(v.substring(<span class="number">3</span>), <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (className.toLowerCase() != current) &#123;</span><br><span class="line">        <span class="keyword">set</span>.add(<span class="string">&#x27;import &quot;<span class="subst">$className</span>.dart&quot;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;List&lt;<span class="subst">$&#123;changeFirstChar(className)&#125;</span>&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v.startsWith(TAG)) &#123;</span><br><span class="line">      <span class="keyword">var</span> fileName = changeFirstChar(v.substring(<span class="number">1</span>), <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (fileName.toLowerCase() != current) &#123;</span><br><span class="line">        <span class="keyword">set</span>.add(<span class="string">&#x27;import &quot;<span class="subst">$fileName</span>.dart&quot;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> changeFirstChar(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;String&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;String&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换模板占位符</span></span><br><span class="line"><span class="built_in">String</span> format(<span class="built_in">String</span> fmt, <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; params) &#123;</span><br><span class="line">  <span class="built_in">int</span> matchIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">String</span> replace(<span class="built_in">Match</span> m) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matchIndex &lt; params.length) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (m[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;%s&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> params[matchIndex++].toString();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Missing parameter for string format&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Invalid format string: &quot;</span> + m[<span class="number">0</span>].toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fmt.replaceAllMapped(<span class="string">&quot;%s&quot;</span>, replace);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  walk();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成脚本没有变动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dart ./lib/mo.dart</span><br><span class="line">flutter packages pub run build_runner build --delete-conflicting-outputs</span><br></pre></td></tr></table></figure><h3 id="实际结果"><a href="#实际结果" class="headerlink" title="实际结果"></a>实际结果</h3><h4 id="普通类型"><a href="#普通类型" class="headerlink" title="普通类型"></a>普通类型</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//record.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;拉屎&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;datetime&quot;</span>:<span class="string">&quot;$DateTime$&quot;</span>,<span class="comment">//复杂类型的传入方式</span></span><br><span class="line">    <span class="attr">&quot;cost&quot;</span>:<span class="number">30</span>,</span><br><span class="line">    <span class="attr">&quot;useful&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成结果：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;record.g.dart&#x27;</span>;</span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    Record(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.content,<span class="keyword">required</span> <span class="keyword">this</span>.datetime,<span class="keyword">required</span> <span class="keyword">this</span>.cost,<span class="keyword">required</span> <span class="keyword">this</span>.useful&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> content;</span><br><span class="line">    <span class="built_in">DateTime</span> datetime;</span><br><span class="line">    <span class="built_in">int</span> cost;</span><br><span class="line">    <span class="built_in">bool</span> useful;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">factory</span> Record.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt; json) =&gt; _$RecordFromJson(json);</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$RecordToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌入类型"><a href="#嵌入类型" class="headerlink" title="嵌入类型"></a>嵌入类型</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mock.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;targets&quot;</span>:<span class="string">&quot;$[]target&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;records&quot;</span>:<span class="string">&quot;$[]record&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;motivations&quot;</span>:<span class="string">&quot;$[]motivation&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成结果</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;target.dart&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;record.dart&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;motivation.dart&quot;</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;mock.g.dart&#x27;</span>;</span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mock</span> </span>&#123;</span><br><span class="line">    Mock(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.version,<span class="keyword">required</span> <span class="keyword">this</span>.targets,<span class="keyword">required</span> <span class="keyword">this</span>.records,<span class="keyword">required</span> <span class="keyword">this</span>.motivations&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> version;</span><br><span class="line">    <span class="built_in">List</span>&lt;Target&gt; targets;</span><br><span class="line">    <span class="built_in">List</span>&lt;Record&gt; records;</span><br><span class="line">    <span class="built_in">List</span>&lt;Motivation&gt; motivations;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">factory</span> Mock.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt; json) =&gt; _$MockFromJson(json);</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$MockToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      最近做自己的小工具用到到flutter相关到东西
    
    </summary>
    
    
      <category term="flutter" scheme="https://adoontheway.gitee.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点020 - docker上部署jar</title>
    <link href="https://adoontheway.gitee.io/2021/05/20/everydayprogress020/"/>
    <id>https://adoontheway.gitee.io/2021/05/20/everydayprogress020/</id>
    <published>2021-05-20T04:50:59.000Z</published>
    <updated>2021-08-25T06:36:51.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在尝试 #flutter# 开发，需要用到后端api，而原先的服务端上基于 <em>Springboot-v2</em> 的，不是完全的前后端分离项目，某些接口需要调整之后才能用，所以需要边调整 <em>api</em> 边开发<em>flutter app</em>。自己用的开发机上2014年左右的<strong>Mac Pro</strong>，同时开启过多的<strong>idea</strong>会很卡，所以想把服务端开发环境部署到<em>docker</em>上，这样就不质疑太卡。  </p><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><p>以下上具体实施步骤</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><em>idea</em> 中，运行’mvn:package’，得到发布的包</p><h2 id="获取java8镜像"><a href="#获取java8镜像" class="headerlink" title="获取java8镜像"></a>获取java8镜像</h2><p><code>shdocker pull java:8</code></p><h2 id="运行docker命令"><a href="#运行docker命令" class="headerlink" title="运行docker命令"></a>运行docker命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name yourname -p port_to_access:port_to_expose -v /local_absolute_path/hehe-2.0.0.RELEASE.jar:/usr/app.jar java:8 java -jar -Xms256m /usr/app.jar</span><br></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>后续如何更新此<em>jar</em>包，不知道能不能直接打包替换后重新启动</p>]]></content>
    
    <summary type="html">
    
      在docker上部署jar
    
    </summary>
    
    
      <category term="docker" scheme="https://adoontheway.gitee.io/tags/docker/"/>
    
      <category term="java" scheme="https://adoontheway.gitee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点019 - golang开发im</title>
    <link href="https://adoontheway.gitee.io/2021/02/22/everydayprogress019/"/>
    <id>https://adoontheway.gitee.io/2021/02/22/everydayprogress019/</id>
    <published>2021-02-22T05:07:29.000Z</published>
    <updated>2021-02-22T05:28:30.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近在网上下载并学习了一个golang开发im的完整课程。<br>完成课程后，做一些思考和总结有利于知识的巩固与消化。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><p>以下是对用到的知识，技术细节，个人新的体会等的一些回顾</p><h2 id="技术实施"><a href="#技术实施" class="headerlink" title="技术实施"></a>技术实施</h2><p>基础开发语言是golang<br>数据库是使用的mysql，用到了xorm来操作mysql<br>通讯用到了websocket/json<br>分布式通讯用的是udpsocket</p><h2 id="mysql-xorm"><a href="#mysql-xorm" class="headerlink" title="mysql/xorm"></a>mysql/xorm</h2><p>突然发现去年更新的win10可以使用docker，然后将docker安装在本机，利用docker来跑mysql。<br>发现xorm真好用啊，不用去写一堆sql来建表，但是过大的自由度是随之而来的其他代价，这个需要研究一下。后续也需要研究gorm和xorm的对比。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>学会了model/controller/service这样的分层：</p><ul><li>model放数据定义相关的，entity之类的东西</li><li>controller也就是直接的处理器，在web中就放接口api</li><li>service用于操作数据库查询，数据处理等逻辑的，更像mvc里面的m，通过使用model来给controller提供逻辑接口</li><li>在前后端分离中是不会有view层存在的，view一般都是前端打包好的一堆静态文件，之后直接放cdn就可以了<h2 id="分布式方案"><a href="#分布式方案" class="headerlink" title="分布式方案"></a>分布式方案</h2>学会了不同的分布式方案，之前在项目中使用的是通过第三方提供的服务中心【zookeeper】来注册/发现服务，这个项目里头用的的udp来发包，简单易懂，但是个人还是有一些不理解的地方。<h2 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h2>终于真正的用上了go module，在项目中使用。<br>对于当前项目子目录下的package的使用有了新的认识。</li></ul>]]></content>
    
    <summary type="html">
    
      golang开发im的课程总结
    
    </summary>
    
    
      <category term="golang" scheme="https://adoontheway.gitee.io/tags/golang/"/>
    
      <category term="xorm" scheme="https://adoontheway.gitee.io/tags/xorm/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点018 - 树莓派上用docker搭建mysql</title>
    <link href="https://adoontheway.gitee.io/2021/01/28/everydayprogress018/"/>
    <id>https://adoontheway.gitee.io/2021/01/28/everydayprogress018/</id>
    <published>2021-01-28T11:10:52.000Z</published>
    <updated>2021-02-22T05:24:54.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>最近发现所学甚多，忘得快，所以打算用<em>golang</em>来实现一些比较具像化的东西。特意下载一个<em>java</em>版本的商城来瞄瞄，顺便转译成<em>golang</em>。</p><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><p>去<a href="https://hub.docker.com/u/arm32v7/" rel="external nofollow noopener noreferrer" target="_blank">docker hub arm32v7</a>上搜索mysql，然后筛选arm架构的，第一名是phpadmin，第二名叫做 <a href="https://hub.docker.com/r/biarms/mysql" rel="external nofollow noopener noreferrer" target="_blank">biarms/mysql</a>,100k的下载量，20star，可以实施。  </p><h2 id="下载和安装镜像"><a href="#下载和安装镜像" class="headerlink" title="下载和安装镜像"></a>下载和安装镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull biarms/mysql</span><br></pre></td></tr></table></figure><h2 id="安装-compose"><a href="#安装-compose" class="headerlink" title="安装 compose"></a>安装 compose</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure><p>由于docker-compose只支持 <em>python 3.6</em> 以上的版本，而树莓派自带的是 <em>python 2.7</em>，所以需要升级一下。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不好搞，先搁置</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://hub.docker.com/_/mariadb" rel="external nofollow noopener noreferrer" target="_blank">official Mariadb on docker hub</a></li><li><a href="https://www.jianshu.com/p/61b3119ab3f5" rel="external nofollow noopener noreferrer" target="_blank">将树莓派内置的 Python2.7 升级成 Python3</a></li></ul><h1 id="Ps"><a href="#Ps" class="headerlink" title="Ps"></a>Ps</h1><ul><li><a href="https://blog.csdn.net/juneraid_huang/article/details/104637528" rel="external nofollow noopener noreferrer" target="_blank">mac上移动硬盘只读的处理办法</a></li></ul>]]></content>
    
    <summary type="html">
    
      正在本地跑一个java商城，需要用到mysql，但是mac不够用了，所以...
    
    </summary>
    
    
      <category term="docker" scheme="https://adoontheway.gitee.io/tags/docker/"/>
    
      <category term="mysql" scheme="https://adoontheway.gitee.io/tags/mysql/"/>
    
      <category term="java" scheme="https://adoontheway.gitee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点017 - Golang与Protobuf</title>
    <link href="https://adoontheway.gitee.io/2020/12/17/everydayprogress017/"/>
    <id>https://adoontheway.gitee.io/2020/12/17/everydayprogress017/</id>
    <published>2020-12-17T07:48:10.000Z</published>
    <updated>2020-12-17T08:13:53.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>虽然弄过很多遍了，但是每次都要去搜索。<br>本着好记性不如烂笔头的原则，今天记录下来。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="下载protobuf包"><a href="#下载protobuf包" class="headerlink" title="下载protobuf包"></a>下载protobuf包</h2><p>在github的protobuf官方上下载最新的release包，<code>protoc-$VERSION-$PLATFORM.zip</code>。<br>例如，我的macos下载的是 <strong>protoc-3.14.0-osx-x86_64.zip</strong> 。  </p><h2 id="解压并添加环境变量"><a href="#解压并添加环境变量" class="headerlink" title="解压并添加环境变量"></a>解压并添加环境变量</h2><p><code>vim ~/.bashrc</code><br>将protoc的bin目录加入环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PATH_TO_PROTO_BIN</span></span><br></pre></td></tr></table></figure><p>运行 <strong>source</strong> 命令之后就可以看到 <em>protoc</em> 可用了。  </p><h2 id="添加golang的protoc插件"><a href="#添加golang的protoc插件" class="headerlink" title="添加golang的protoc插件"></a>添加golang的protoc插件</h2><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure><p>完成后可以在你的 <em>GOPATH/bin</em> 下看到一个 <strong>protoc-gen-go</strong> 文件。  </p><p>以上步骤之后，就可以在<strong>golang</strong>中开始使用<strong>protobuf</strong>了。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.14.0" rel="external nofollow noopener noreferrer" target="_blank">!protobuf release</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/gotutorial" rel="external nofollow noopener noreferrer" target="_blank">!google developer protobuf go tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      在Golang中使用Protobuf
    
    </summary>
    
    
      <category term="protobuf" scheme="https://adoontheway.gitee.io/tags/protobuf/"/>
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点016 - sync.Map</title>
    <link href="https://adoontheway.gitee.io/2020/12/16/everydayprogress016/"/>
    <id>https://adoontheway.gitee.io/2020/12/16/everydayprogress016/</id>
    <published>2020-12-16T04:22:51.000Z</published>
    <updated>2020-12-16T04:38:17.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>之前面试有遇到过普通 <strong><em>Map</em></strong> 的安全问题，其实也就是问关于数据竞争的问题。<br><em>golang</em> 后面推出的 <em>sync.Map</em> 就是用于解决这个问题的。<br>当时对方提到也可以通过 <em>chan</em> 来做 <em>map</em> 的数据读写，这样就可以保证数据的正确性。<br>个人一直对这个做法表示怀疑态度，<em>channel</em> 用于此使用率很高的对象，会不会造成滥用或者性能方面的问题呢？暂时没时间去了解。<br>当初个人给出 <em>map</em> 配锁的方案，面试官问到需要如何保证使用者在用完之后释放锁，从而避免死锁。<br>个人当初也提出了自己的解决方案：自制一个<em>map*，配合以 *mutex</em> 来保证其安全，将加解锁的操作全部限制在这个自定义的 <em>map</em> 内。<br>普通开发人员只需要直接的使用就可以了。<br>不曾想，大概的看来一下 <em>sync.Map</em> 之后其中也是依赖 <em>mutex</em> 来确保数据的安全的。<br>当然，个人认为，这种普通对象的使用，更多的要从管理上去解决，诸如：面试的时候多注意员工的编程基础，公司提供完善的编码规范，完善的api，以及多对员工进行一些培训之类的。<br>千人千面，员工难免良莠不齐，但是很多事情可以通过一些手段去解决的。<br>不纠结，开始看代码。</p><h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2016 The Go Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style</span></span><br><span class="line"><span class="comment">// license that can be found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sync</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sync/atomic"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 与 Go 的 map[interface&#123;&#125;]interface&#123;&#125; 很像，不同的是他是并发安全的，在多协程并发中使用他可以不用额外加锁或者其他的调整</span></span><br><span class="line"><span class="comment">// 载入, 存放, 和 删除操作消耗同样的时间</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The Map type is specialized. Most code should use a plain Go map instead,</span></span><br><span class="line"><span class="comment">// with separate locking or coordination, for better type safety and to make it</span></span><br><span class="line"><span class="comment">// easier to maintain other invariants along with the map content.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The Map type is optimized for two common use cases: (1) when the entry for a given</span></span><br><span class="line"><span class="comment">// key is only ever written once but read many times, as in caches that only grow,</span></span><br><span class="line"><span class="comment">// or (2) when multiple goroutines read, write, and overwrite entries for disjoint</span></span><br><span class="line"><span class="comment">// sets of keys. In these two cases, use of a Map may significantly reduce lock</span></span><br><span class="line"><span class="comment">// contention compared to a Go map paired with a separate Mutex or RWMutex.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The zero Map is empty and ready for use. A Map must not be copied after first use.</span></span><br><span class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> &#123;</span><br><span class="line">mu Mutex</span><br><span class="line"></span><br><span class="line"><span class="comment">// read contains the portion of the map's contents that are safe for</span></span><br><span class="line"><span class="comment">// concurrent access (with or without mu held).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The read field itself is always safe to load, but must only be stored with</span></span><br><span class="line"><span class="comment">// mu held.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Entries stored in read may be updated concurrently without mu, but updating</span></span><br><span class="line"><span class="comment">// a previously-expunged entry requires that the entry be copied to the dirty</span></span><br><span class="line"><span class="comment">// map and unexpunged with mu held.</span></span><br><span class="line">read atomic.Value <span class="comment">// readOnly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dirty contains the portion of the map's contents that require mu to be</span></span><br><span class="line"><span class="comment">// held. To ensure that the dirty map can be promoted to the read map quickly,</span></span><br><span class="line"><span class="comment">// it also includes all of the non-expunged entries in the read map.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Expunged entries are not stored in the dirty map. An expunged entry in the</span></span><br><span class="line"><span class="comment">// clean map must be unexpunged and added to the dirty map before a new value</span></span><br><span class="line"><span class="comment">// can be stored to it.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If the dirty map is nil, the next write to the map will initialize it by</span></span><br><span class="line"><span class="comment">// making a shallow copy of the clean map, omitting stale entries.</span></span><br><span class="line">dirty <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line"></span><br><span class="line"><span class="comment">// misses counts the number of loads since the read map was last updated that</span></span><br><span class="line"><span class="comment">// needed to lock mu to determine whether the key was present.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Once enough misses have occurred to cover the cost of copying the dirty</span></span><br><span class="line"><span class="comment">// map, the dirty map will be promoted to the read map (in the unamended</span></span><br><span class="line"><span class="comment">// state) and the next store to the map will make a new dirty copy.</span></span><br><span class="line">misses <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readOnly is an immutable struct stored atomically in the Map.read field.</span></span><br><span class="line"><span class="keyword">type</span> readOnly <span class="keyword">struct</span> &#123;</span><br><span class="line">m       <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line">amended <span class="keyword">bool</span> <span class="comment">// true if the dirty map contains some key not in m.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expunged is an arbitrary pointer that marks entries which have been deleted</span></span><br><span class="line"><span class="comment">// from the dirty map.</span></span><br><span class="line"><span class="keyword">var</span> expunged = unsafe.Pointer(<span class="built_in">new</span>(<span class="keyword">interface</span>&#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// An entry is a slot in the map corresponding to a particular key.</span></span><br><span class="line"><span class="keyword">type</span> entry <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// p points to the interface&#123;&#125; value stored for the entry.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If p == nil, the entry has been deleted and m.dirty == nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If p == expunged, the entry has been deleted, m.dirty != nil, and the entry</span></span><br><span class="line"><span class="comment">// is missing from m.dirty.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Otherwise, the entry is valid and recorded in m.read.m[key] and, if m.dirty</span></span><br><span class="line"><span class="comment">// != nil, in m.dirty[key].</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// An entry can be deleted by atomic replacement with nil: when m.dirty is</span></span><br><span class="line"><span class="comment">// next created, it will atomically replace nil with expunged and leave</span></span><br><span class="line"><span class="comment">// m.dirty[key] unset.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// An entry's associated value can be updated by atomic replacement, provided</span></span><br><span class="line"><span class="comment">// p != expunged. If p == expunged, an entry's associated value can be updated</span></span><br><span class="line"><span class="comment">// only after first setting m.dirty[key] = e so that lookups using the dirty</span></span><br><span class="line"><span class="comment">// map find the entry.</span></span><br><span class="line">p unsafe.Pointer <span class="comment">// *interface&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newEntry</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">entry</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;entry&#123;p: unsafe.Pointer(&amp;i)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load returns the value stored in the map for a key, or nil if no</span></span><br><span class="line"><span class="comment">// value is present.</span></span><br><span class="line"><span class="comment">// The ok result indicates whether value was found in the map.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">Load</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(value <span class="keyword">interface</span>&#123;&#125;, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">e, ok := read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line"><span class="comment">// Avoid reporting a spurious miss if m.dirty got promoted while we were</span></span><br><span class="line"><span class="comment">// blocked on m.mu. (If further loads of the same key will not miss, it's</span></span><br><span class="line"><span class="comment">// not worth copying the dirty map for this key.)</span></span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line">e, ok = read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line">e, ok = m.dirty[key]</span><br><span class="line"><span class="comment">// Regardless of whether the entry was present, record a miss: this key</span></span><br><span class="line"><span class="comment">// will take the slow path until the dirty map is promoted to the read</span></span><br><span class="line"><span class="comment">// map.</span></span><br><span class="line">m.missLocked()</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e.load()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">load</span><span class="params">()</span> <span class="params">(value <span class="keyword">interface</span>&#123;&#125;, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">if</span> p == <span class="literal">nil</span> || p == expunged &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *(*<span class="keyword">interface</span>&#123;&#125;)(p), <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store sets the value for a key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">Store</span><span class="params">(key, value <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line"><span class="keyword">if</span> e, ok := read.m[key]; ok &amp;&amp; e.tryStore(&amp;value) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line"><span class="keyword">if</span> e, ok := read.m[key]; ok &#123;</span><br><span class="line"><span class="keyword">if</span> e.unexpungeLocked() &#123;</span><br><span class="line"><span class="comment">// The entry was previously expunged, which implies that there is a</span></span><br><span class="line"><span class="comment">// non-nil dirty map and this entry is not in it.</span></span><br><span class="line">m.dirty[key] = e</span><br><span class="line">&#125;</span><br><span class="line">e.storeLocked(&amp;value)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> e, ok := m.dirty[key]; ok &#123;</span><br><span class="line">e.storeLocked(&amp;value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !read.amended &#123;</span><br><span class="line"><span class="comment">// We're adding the first new key to the dirty map.</span></span><br><span class="line"><span class="comment">// Make sure it is allocated and mark the read-only map as incomplete.</span></span><br><span class="line">m.dirtyLocked()</span><br><span class="line">m.read.Store(readOnly&#123;m: read.m, amended: <span class="literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">m.dirty[key] = newEntry(value)</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tryStore stores a value if the entry has not been expunged.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If the entry is expunged, tryStore returns false and leaves the entry</span></span><br><span class="line"><span class="comment">// unchanged.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">tryStore</span><span class="params">(i *<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">if</span> p == expunged &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, p, unsafe.Pointer(i)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unexpungeLocked ensures that the entry is not marked as expunged.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If the entry was previously expunged, it must be added to the dirty map</span></span><br><span class="line"><span class="comment">// before m.mu is unlocked.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">unexpungeLocked</span><span class="params">()</span> <span class="params">(wasExpunged <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> atomic.CompareAndSwapPointer(&amp;e.p, expunged, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// storeLocked unconditionally stores a value to the entry.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The entry must be known not to be expunged.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">storeLocked</span><span class="params">(i *<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">atomic.StorePointer(&amp;e.p, unsafe.Pointer(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoadOrStore returns the existing value for the key if present.</span></span><br><span class="line"><span class="comment">// Otherwise, it stores and returns the given value.</span></span><br><span class="line"><span class="comment">// The loaded result is true if the value was loaded, false if stored.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">LoadOrStore</span><span class="params">(key, value <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(actual <span class="keyword">interface</span>&#123;&#125;, loaded <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// Avoid locking if it's a clean hit.</span></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line"><span class="keyword">if</span> e, ok := read.m[key]; ok &#123;</span><br><span class="line">actual, loaded, ok := e.tryLoadOrStore(value)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="keyword">return</span> actual, loaded</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line"><span class="keyword">if</span> e, ok := read.m[key]; ok &#123;</span><br><span class="line"><span class="keyword">if</span> e.unexpungeLocked() &#123;</span><br><span class="line">m.dirty[key] = e</span><br><span class="line">&#125;</span><br><span class="line">actual, loaded, _ = e.tryLoadOrStore(value)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> e, ok := m.dirty[key]; ok &#123;</span><br><span class="line">actual, loaded, _ = e.tryLoadOrStore(value)</span><br><span class="line">m.missLocked()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !read.amended &#123;</span><br><span class="line"><span class="comment">// We're adding the first new key to the dirty map.</span></span><br><span class="line"><span class="comment">// Make sure it is allocated and mark the read-only map as incomplete.</span></span><br><span class="line">m.dirtyLocked()</span><br><span class="line">m.read.Store(readOnly&#123;m: read.m, amended: <span class="literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">m.dirty[key] = newEntry(value)</span><br><span class="line">actual, loaded = value, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> actual, loaded</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tryLoadOrStore atomically loads or stores a value if the entry is not</span></span><br><span class="line"><span class="comment">// expunged.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If the entry is expunged, tryLoadOrStore leaves the entry unchanged and</span></span><br><span class="line"><span class="comment">// returns with ok==false.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">tryLoadOrStore</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(actual <span class="keyword">interface</span>&#123;&#125;, loaded, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">if</span> p == expunged &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> *(*<span class="keyword">interface</span>&#123;&#125;)(p), <span class="literal">true</span>, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy the interface after the first load to make this method more amenable</span></span><br><span class="line"><span class="comment">// to escape analysis: if we hit the "load" path or the entry is expunged, we</span></span><br><span class="line"><span class="comment">// shouldn't bother heap-allocating.</span></span><br><span class="line">ic := i</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, <span class="literal">nil</span>, unsafe.Pointer(&amp;ic)) &#123;</span><br><span class="line"><span class="keyword">return</span> i, <span class="literal">false</span>, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">p = atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">if</span> p == expunged &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> *(*<span class="keyword">interface</span>&#123;&#125;)(p), <span class="literal">true</span>, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete deletes the value for a key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">e, ok := read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line">e, ok = read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line"><span class="built_in">delete</span>(m.dirty, key)</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">e.<span class="built_in">delete</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">delete</span><span class="params">()</span> <span class="params">(hadValue <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">if</span> p == <span class="literal">nil</span> || p == expunged &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, p, <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Range calls f sequentially for each key and value present in the map.</span></span><br><span class="line"><span class="comment">// If f returns false, range stops the iteration.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Range does not necessarily correspond to any consistent snapshot of the Map's</span></span><br><span class="line"><span class="comment">// contents: no key will be visited more than once, but if the value for any key</span></span><br><span class="line"><span class="comment">// is stored or deleted concurrently, Range may reflect any mapping for that key</span></span><br><span class="line"><span class="comment">// from any point during the Range call.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Range may be O(N) with the number of elements in the map even if f returns</span></span><br><span class="line"><span class="comment">// false after a constant number of calls.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">Range</span><span class="params">(f <span class="keyword">func</span>(key, value <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span>)</span> &#123;</span><br><span class="line"><span class="comment">// We need to be able to iterate over all of the keys that were already</span></span><br><span class="line"><span class="comment">// present at the start of the call to Range.</span></span><br><span class="line"><span class="comment">// If read.amended is false, then read.m satisfies that property without</span></span><br><span class="line"><span class="comment">// requiring us to hold m.mu for a long time.</span></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line"><span class="keyword">if</span> read.amended &#123;</span><br><span class="line"><span class="comment">// m.dirty contains keys not in read.m. Fortunately, Range is already O(N)</span></span><br><span class="line"><span class="comment">// (assuming the caller does not break out early), so a call to Range</span></span><br><span class="line"><span class="comment">// amortizes an entire copy of the map: we can promote the dirty copy</span></span><br><span class="line"><span class="comment">// immediately!</span></span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line"><span class="keyword">if</span> read.amended &#123;</span><br><span class="line">read = readOnly&#123;m: m.dirty&#125;</span><br><span class="line">m.read.Store(read)</span><br><span class="line">m.dirty = <span class="literal">nil</span></span><br><span class="line">m.misses = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, e := <span class="keyword">range</span> read.m &#123;</span><br><span class="line">v, ok := e.load()</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !f(k, v) &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">missLocked</span><span class="params">()</span></span> &#123;</span><br><span class="line">m.misses++</span><br><span class="line"><span class="keyword">if</span> m.misses &lt; <span class="built_in">len</span>(m.dirty) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">m.read.Store(readOnly&#123;m: m.dirty&#125;)</span><br><span class="line">m.dirty = <span class="literal">nil</span></span><br><span class="line">m.misses = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">dirtyLocked</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> m.dirty != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">m.dirty = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry, <span class="built_in">len</span>(read.m))</span><br><span class="line"><span class="keyword">for</span> k, e := <span class="keyword">range</span> read.m &#123;</span><br><span class="line"><span class="keyword">if</span> !e.tryExpungeLocked() &#123;</span><br><span class="line">m.dirty[k] = e</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">tryExpungeLocked</span><span class="params">()</span> <span class="params">(isExpunged <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">for</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, <span class="literal">nil</span>, expunged) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">p = atomic.LoadPointer(&amp;e.p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p == expunged</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      了解一下 sync.Map 的实现
    
    </summary>
    
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点015 - 近期面试的一些总结</title>
    <link href="https://adoontheway.gitee.io/2020/12/14/everydayprogress015/"/>
    <id>https://adoontheway.gitee.io/2020/12/14/everydayprogress015/</id>
    <published>2020-12-14T05:38:52.000Z</published>
    <updated>2021-01-11T03:19:50.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="近期面试中遇到的一些问题的总结"><a href="#近期面试中遇到的一些问题的总结" class="headerlink" title="近期面试中遇到的一些问题的总结"></a>近期面试中遇到的一些问题的总结</h1><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>近一年有1/3的时间中老家开荒种地，其他时间有用来学会和中年危机自处，虽然是失败了，还在调整中；有一部分时间用来思考和规划自己的未来，前期很盲目，后期在某音上看到某网红的3+1理论，大意是择业标准：趋势(主) + (爱好，能力，资源)的一个抉择，个人觉得很有道理。<br>自己选了 <strong>golang</strong> 作为后续的主要发展目标，完全摒弃了前端开发。当然，自己业余还是可以做一点的。<br>在网站上刷新状态，被动式找工作。<br>然后由于没有 <strong>golang</strong> 的实际操作经验，导致自己的面试的机会和面试的表现都很差劲。<br>所以今天决定静下心来学习和沉淀一些东西以认真的态度对待面试，以及面对自己的人生。<br>虽然前路迷茫，但是还得走一步是一步。</p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="golang的垃圾回收"><a href="#golang的垃圾回收" class="headerlink" title="golang的垃圾回收"></a>golang的垃圾回收</h3><p><strong>golang</strong> 的垃圾回收机制和我之前所了解的 <strong>as</strong> 所使用的引用技术法有根本性的不同。<br><strong>golang</strong> 使用的是 <em>标记清除法</em>，即 <em>mark-sweeping</em>。<br>他主要是分为两步：</p><ul><li>标记：三色标记法，通过将所有对象区分为白，灰，黑三色，配合以写屏障 <em>write barrier</em></li><li>清理：清理所有的白色对象</li></ul><p>需要注意的是，标记清理期间需要暂停整个程序 <em>stw:stop the world</em></p><h3 id="变量逃逸"><a href="#变量逃逸" class="headerlink" title="变量逃逸"></a>变量逃逸</h3><p>一般代指局部变量本来应当分配到栈上的，但是这个局部变量在本作用域，即本函数外需要使用到，那么这个局部变量会被存储到堆上去。</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>这个主要考察的是否你是否会直接使用 ‘+’ 来拼接字符串，其实跟 <strong>java</strong> 类似，<strong>java</strong> 有类似 <em>StringBuffer</em> 之类的东西来处理字符串拼接，<strong>golang</strong> 里面用的是 <em>string.Buffer</em> 来处理字符串拼接。<br>当然，我面试的时候回答用 ‘[]byte’ 来处理拼接也是可以的。但是，这里是需要指定长度的。不用 ‘+’ 进行操作也是这个运原理，一个<strong>string</strong> 其实代表的是一个 <strong>rune数组</strong>。</p><h3 id="内存分配的问题"><a href="#内存分配的问题" class="headerlink" title="内存分配的问题"></a>内存分配的问题</h3><p>之前被问到 <strong>slice</strong>的内存分配是什么样子的。我的回答是当前 <em>内存x2</em>。面试官接着问是否一直都是 <strong>x2</strong> 的申请呢？答案肯定不是。在 <strong>2048 byte</strong> 之前，内存都是 <strong>x2</strong> 的去申请，大于 <strong>2048 byte</strong> 的话每次申请 <strong>640 byte</strong>。</p><h3 id="处理channel超时"><a href="#处理channel超时" class="headerlink" title="处理channel超时"></a>处理channel超时</h3><p><em>goroutine</em> 超时可以通过 <em>Context.withtimeout</em> 和 <em>timer.after</em> 来处理。<br><em>goroutine</em> 是不能杀死的。</p><h3 id="for和range"><a href="#for和range" class="headerlink" title="for和range"></a>for和range</h3><p>不懂区别的最好用 <strong>for</strong>，因为无论在何种情况下<strong>for</strong>的性能永远是大于等于<strong>range</strong>的，<strong>range</strong>在循环复杂对象的时候性能会远小于 <strong>for</strong> ，当然，传入复杂对象指针除外。<br>想起面试过一个问题，<strong>map</strong> 的循环是引用还是值，其实，这个问题是值得商榷的，他循环是其实是值的复制。<br>另外，数组的基本值，不是引用类型。</p><h3 id="读写锁和互斥锁"><a href="#读写锁和互斥锁" class="headerlink" title="读写锁和互斥锁"></a>读写锁和互斥锁</h3><p>互斥锁就是 <strong>mutex.Lock</strong>， 读写锁就是 <strong>mutex.RWLock</strong> 。两者的区别是把读和写分开来，读写锁可以同时读，也就是只锁定写。效率在读多写少的情况下肯定是互斥锁强得多。</p><h3 id="常用缓存失效算法"><a href="#常用缓存失效算法" class="headerlink" title="常用缓存失效算法"></a>常用缓存失效算法</h3><ul><li>FIFO: first in first out</li><li>LFU: Least Frequenctly Used</li><li>LRU: Least Recently Used</li></ul><h2 id="分布式缓存相关"><a href="#分布式缓存相关" class="headerlink" title="分布式缓存相关"></a>分布式缓存相关</h2><h3 id="分布式缓存节点存值问题"><a href="#分布式缓存节点存值问题" class="headerlink" title="分布式缓存节点存值问题"></a>分布式缓存节点存值问题</h3><p>分布式缓存并不是每个节点上存的都一样，他是根据每个key进行hash操作然后确定这个缓存会存储到哪个节点上去。<br>这样节省了缓存空间，也提高了缓存效率。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>节点变化，例如 <strong>10</strong> 个变成了 <strong>9</strong> 个。那么h <em>hash</em> 取值就从 <code>hash(key)%10</code> 变成了 <code>hash(key)%9</code>。这样一来，几乎所有的缓存都失效了，节点接受到请求之后都需要重新去获取，就造成了缓存雪崩。</p><blockquote><p>缓存雪崩：缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。常因为缓存服务器宕机，或缓存设置了相同的过期时间引起。</p></blockquote><p>解决缓存雪崩，需要用到一致性 <em>hash</em> 。</p><h3 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h3><p>一致性hash算法原理：</p><ul><li>一致性hash算法将key映射到2^32的空间中，这是一个首尾相连的环</li><li>计算节点的hash值，将他投放到环上，hash值通常以机器码，ip，编号等来计算</li><li>计算key的hash值，顺时针寻找到的第一个计算节点就是他存取的节点</li></ul><p>这样一来，新增/删除节点只需要重新定位这个节点附近的节点就可以了。  </p><h3 id="一致性hash可能会导致的数据倾斜问题"><a href="#一致性hash可能会导致的数据倾斜问题" class="headerlink" title="一致性hash可能会导致的数据倾斜问题"></a>一致性hash可能会导致的数据倾斜问题</h3><p>但是这样的话，由于机器hash分布不均匀，有可能导致数据倾斜。<br>为了解决这个问题，引入了虚拟节点，一个真实节点对应多个虚拟节点，例如：节点1包含节点1-1，节点1-2….即诶单1-n<br>代价是只需要维护一个map来存放虚拟节点的映射关系。  </p><h3 id="缓存击穿和缓存穿透"><a href="#缓存击穿和缓存穿透" class="headerlink" title="缓存击穿和缓存穿透"></a>缓存击穿和缓存穿透</h3><blockquote><p>缓存击穿：一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到 DB ，造成瞬时DB请求量大、压力骤增。</p></blockquote><blockquote><p>缓存穿透：查询一个不存在的数据，因为不存在则不会写到缓存中，所以每次都会去请求 DB，如果瞬间流量过大，穿透到 DB，导致宕机。</p></blockquote><p>这两个都是出现在并发请求过高的时候，优化的手段是同时收到的请求合并处理就可以了。</p><h3 id="Redis缓存淘汰策略"><a href="#Redis缓存淘汰策略" class="headerlink" title="Redis缓存淘汰策略"></a>Redis缓存淘汰策略</h3><p>缓存设置：</p><ul><li>在 redis 中，允许用户设置最大使用内存大小maxmemory，默认为0，没有指定最大缓存，如果有新的数据添加，超过最大内存，则会使redis崩溃，所以一定要设置。</li><li>redis 内存数据集大小上升到一定大小的时候，就会实行数据淘汰策略。</li><li>redis淘汰策略配置：maxmemory-policy voltile-lru，支持热配置  </li></ul><p>缓存淘汰策略：</p><ol><li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：禁止驱逐数据</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://geektutu.com/post/high-performance-go.html" rel="external nofollow noopener noreferrer" target="_blank">Go 语言高性能编程</a></li><li><a href="https://geektutu.com/post/geecache-day4.html" rel="external nofollow noopener noreferrer" target="_blank">动手写分布式缓存 - GeeCache第四天 一致性哈希(hash)</a></li><li><a href="https://www.oschina.net/group/database#/detail/2302258" rel="external nofollow noopener noreferrer" target="_blank">Redis内存模型原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      近期面试中遇到的一些技术方面的问题的总结
    
    </summary>
    
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>flutter开发笔记</title>
    <link href="https://adoontheway.gitee.io/2020/12/07/flutternotes/"/>
    <id>https://adoontheway.gitee.io/2020/12/07/flutternotes/</id>
    <published>2020-12-07T03:17:12.000Z</published>
    <updated>2021-01-12T06:19:29.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="aar包下载不到的问题"><a href="#aar包下载不到的问题" class="headerlink" title="aar包下载不到的问题"></a>aar包下载不到的问题</h2><p>遇到了<strong>aar包</strong>在<em>vs code</em>中下载不到，虽然配置了<strong><em>aliyun</em></strong>的源，但是可以通过复制地址从浏览器下载到，此时，讲下载到到aar包存放到 <strong>c:/users/you/.gradle/caches/modules-2/files-2/you.packgenae/youpagename/x.x.x/hashcodes/</strong> 下面就可以了。jar包也差不多原理，我自己到jar包是因为蓝牙网卡不稳定到原因。</p><h2 id="flutter-sound"><a href="#flutter-sound" class="headerlink" title="flutter_sound"></a>flutter_sound</h2><p><strong>flutter_sound</strong> 的录音功能之支持<strong>android 24</strong>以上，这个是在<strong>gradle</strong>文件里面看到的。且对于<strong>iOS</strong>也只支持<em>10.0<em>以上的版本，所以需要修改*</em>iOS*<em>相关文件的</em>platform<em>参数，因为目前默认的是</em>9.0<em>。<br>对应的需要升级</em>cocoapods</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade cocoapods</span><br></pre></td></tr></table></figure><h2 id="项目名字的修改"><a href="#项目名字的修改" class="headerlink" title="项目名字的修改"></a>项目名字的修改</h2><p>这个需要全局去修改很多相关的东西，包括文件夹在内，所以前期最好取个好名字。</p><h2 id="pod-install失败"><a href="#pod-install失败" class="headerlink" title="pod install失败"></a>pod install失败</h2><blockquote><p>RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 60</p></blockquote><p>远程超大，加大git缓存区大小即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 114288000</span><br></pre></td></tr></table></figure><p>搞了好几天，才发现是镜像的问题，虽然换了清华的镜像，还是很慢，直到换成gitee的镜像，才上到了4m/s。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~./cocoapods/repos</span><br><span class="line">// 清理其中的trunk</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/mirrors/CocoaPods-Specs.git master</span><br><span class="line">// 进入项目的 ios 里，打开podfile，在第一行添加</span><br><span class="line"><span class="built_in">source</span> <span class="string">'https://gitee.com/mirrors/CocoaPods-Specs.git'</span></span><br></pre></td></tr></table></figure><h2 id="找不到-libflutter-so"><a href="#找不到-libflutter-so" class="headerlink" title="找不到 libflutter.so"></a>找不到 libflutter.so</h2>]]></content>
    
    <summary type="html">
    
      flutter开发中遇到的问题
    
    </summary>
    
    
      <category term="flutter" scheme="https://adoontheway.gitee.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点014 - 树莓派上搭建docker/etcd</title>
    <link href="https://adoontheway.gitee.io/2020/09/28/everydayprogress014/"/>
    <id>https://adoontheway.gitee.io/2020/09/28/everydayprogress014/</id>
    <published>2020-09-28T04:46:51.000Z</published>
    <updated>2020-09-29T11:23:44.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>尝试去搭建一个最简单的分布式系统，包括消息队列，服务发现等</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>首先得在树莓派上安装 <em>docker</em> ，此处不赘述  </p><h2 id="etcd镜像"><a href="#etcd镜像" class="headerlink" title="etcd镜像"></a>etcd镜像</h2><p>由于树莓派上arm架构的，所以我们得找一个arm镜像，这里需要自己去动手，我用的是 <strong>peterrosell/etcd-rpi</strong> ，见参考列表。  </p><h3 id="如何知道自己的树莓派架构"><a href="#如何知道自己的树莓派架构" class="headerlink" title="如何知道自己的树莓派架构"></a>如何知道自己的树莓派架构</h3><p>查看自己的树莓派是 <em>arm32</em> 还是 <em>arm64</em> 的，可以用以下指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的树莓派输出的是32，所以是arm32</span></span><br><span class="line">getconf LONG_BIT</span><br><span class="line"><span class="comment"># 查看cpu信息</span></span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line"><span class="comment"># 查看系统信息</span></span><br><span class="line">lsb_release -a</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure><h2 id="使用官方的发现服务"><a href="#使用官方的发现服务" class="headerlink" title="使用官方的发现服务"></a>使用官方的发现服务</h2><p>访问<code>https://discovery.etcd.io/new?size=3</code>这个网址可以获得你的服务发现网址</p><h2 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h2><p>由于在 <strong>etcd</strong> <em>checkout</em> 完成之后提示找不到命令 <em>go</em> ,所以此处我们需要安装一下 <strong>go</strong>。<br>ps:<br>“可以在安装脚本中检测和安装对应架构的 go “</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -d https://studygolang.com/dl/golang/go1.15.2.linux-armv6l.tar.gz</span><br><span class="line">tar -zxvf go1.15.2.linux-armv6l.tar.gz</span><br></pre></td></tr></table></figure><p>此处安装的是 <em>armv6</em> 的包， <strong>64bit</strong> 的系统另有 <em>armv8</em> 的包。<br>修改环境变量，加入 <strong>go</strong> 的 <strong>bin</strong> 目录，然后重启或者使用 <em>source</em> 重载。<br>那么我们就可以开始使用 <em>go</em> 了。</p><h1 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h1><h2 id="Bad-substitution"><a href="#Bad-substitution" class="headerlink" title="Bad substitution"></a>Bad substitution</h2><p>通过<code>sh</code>运行脚本的时候出现<code>bad substitution</code>的问题，只要在脚本文件上加上<code>#!/bin/bash</code>，然后通过 <code>bash</code>来运行脚本。</p><h2 id="go-mod-i-o-timeout"><a href="#go-mod-i-o-timeout" class="headerlink" title="go mod i/o timeout"></a>go mod i/o timeout</h2><blockquote><blockquote><blockquote><p>go: github.com/bgentry/speakeasy@v0.1.0: Get “<a href="https://proxy.golang.org/github.com/bgentry/speakeasy/@v/v0.1.0.mod&quot;" rel="external nofollow noopener noreferrer" target="_blank">https://proxy.golang.org/github.com/bgentry/speakeasy/@v/v0.1.0.mod&quot;</a>: dial tcp 172.217.24.17:443: i/o timeout</p></blockquote></blockquote></blockquote><p>设置一下goproxy的全局代理即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io</span><br></pre></td></tr></table></figure><h2 id="unknown-flag-–platform"><a href="#unknown-flag-–platform" class="headerlink" title="unknown flag: –platform"></a>unknown flag: –platform</h2><blockquote><blockquote><blockquote><ul><li>docker buildx build –platform linux/arm/v7 -t peterrosell/etcd-rpi:3.4.10 .<br>unknown flag: –platform</li></ul></blockquote></blockquote></blockquote><p>这是因为buildx是属于实验特性，需要开启实验特性，可查看参考列表中的相关信息。<br>处理很简单，需要设置以下环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DOCKER_CLI_EXPERIMENTAL=enabled</span><br></pre></td></tr></table></figure><h2 id="unsupported-platform"><a href="#unsupported-platform" class="headerlink" title="unsupported platform"></a>unsupported platform</h2><blockquote><blockquote><blockquote><p>etcd on unsupported platform without ETCD_UNSUPPORTED_ARCH=arm set</p></blockquote></blockquote></blockquote><p>在环境变量中添加以下内容即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ETCD_UNSUPPORTED_ARCH=arm</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://hub.docker.com/r/balenalib/raspberry-pi-alpine" rel="external nofollow noopener noreferrer" target="_blank">balenalib/raspberry-pi-alpine</a>: <a href="https://balena.io/" rel="external nofollow noopener noreferrer" target="_blank">balena.io</a>IoT镜像系列的一部分</li><li><a href="https://github.com/peterrosell/etcd-rpi" rel="external nofollow noopener noreferrer" target="_blank">peterrosell/etcd-rpi</a>: 树莓派上运行etcd的参考内容</li><li><a href="https://www.bookstack.cn/read/docker_practice-1.2.0/buildx-buildx.md" rel="external nofollow noopener noreferrer" target="_blank">使用 Buildx 构建镜像</a></li></ul>]]></content>
    
    <summary type="html">
    
      在树莓派上搭建 docker/etcd环境
    
    </summary>
    
    
      <category term="docker" scheme="https://adoontheway.gitee.io/tags/docker/"/>
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
      <category term="etcd" scheme="https://adoontheway.gitee.io/tags/etcd/"/>
    
      <category term="树莓派" scheme="https://adoontheway.gitee.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Gin学习笔记 - gin.go</title>
    <link href="https://adoontheway.gitee.io/2020/09/03/gin-notes-1/"/>
    <id>https://adoontheway.gitee.io/2020/09/03/gin-notes-1/</id>
    <published>2020-09-03T04:27:36.000Z</published>
    <updated>2020-09-03T05:17:08.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>今天开始阅读 <code>gin.go</code> 代码，这里都是一些核心的定义和默认配置相关的</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><p>与 <strong>Context.go</strong> 不同的是，这里在注释里明确的分块，可能是因为这里内容不好分块的原因吧</p><h2 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h2><p>一些全局常量和变量的定义</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>Version: <strong>gin</strong>的版本</li><li>defaultMultipartMemory: 默认的<code>multipart/form-data</code>内存尺寸为32MB</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>default404Body: 默认的404状态码响应体</li><li>default405Body: 默认的405状态码响应体</li><li>defaultAppEngine: 在新建 <strong>Engine</strong> 实例的时候传给 <em>AppEngine</em></li></ul><h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><ul><li><p>HandlerFunc: func(*Context)</p></li><li><p>HandlersChain: []HandlerFunc</p></li><li><p>RouteInfo:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RouteInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Method  <span class="keyword">string</span> <span class="comment">//Http 请求方法，例如GET，POST</span></span><br><span class="line">Path    <span class="keyword">string</span> <span class="comment">//请求的资源路径</span></span><br><span class="line">Handler <span class="keyword">string</span> <span class="comment">//处理器的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RoutesInfo: []RouteInfo</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2></li><li><p>HandlerChain.Last(): 返回处理器链条的最后一个，一般这个都是主处理器</p></li></ul><h2 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h2><p>这个是框架的核心之一，<strong>Engine</strong> 是框架的实例，他包含里 <em>muxer*， *中间价</em> 和 <em>配置的设置</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">RouterGroup <span class="comment">// 内嵌了RouterGroup,来自 routergroup.go，用于在内部配置路由器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自动转反斜杠，例如请求/foo/，但是只有地址为/foo的路由，客户端将会带着状态码301(GET)或307(其他请求方法)转到/foo</span></span><br><span class="line">    RedirectTrailingSlash <span class="keyword">bool</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果找不到处理器的话，是否自动修复请求路径</span></span><br><span class="line">    <span class="comment">// 首先会去掉多余的路径元素，如 ../或者//</span></span><br><span class="line">    <span class="comment">// 之后路由器会做一个不区分大小写的路径查询</span></span><br><span class="line">    <span class="comment">// 如果可以找到对应的路径，那么就重定向到此路径，状态码301(GET)或者307(其他)</span></span><br><span class="line">    <span class="comment">// 例如 /FOO 和 /..//Foo 都会被重定向到 /foo</span></span><br><span class="line">    <span class="comment">// RedirectTrailingSlash依赖此项设置</span></span><br><span class="line">RedirectFixedPath <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前请求无法被路由到，激活此选项将会查找是否有其他方法的此路径的处理器</span></span><br><span class="line">    <span class="comment">// 如果找得到的话，那么会返回`Method Not Allowed`和HTTP状态码405</span></span><br><span class="line">    <span class="comment">// 如果没有其他方法的话，那么会被发放到 NotFound 处理器</span></span><br><span class="line">HandleMethodNotAllowed <span class="keyword">bool</span></span><br><span class="line">ForwardedByClientIP    <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// issue #726 #755，此选项用于整合Paas而添加以 'X-AppEngine...' 开头的请求头</span></span><br><span class="line">AppEngine <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果激活此选项，会用url.RawPath来找请求参数</span></span><br><span class="line">UseRawPath <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果激活此选项将会对path值进行unescape</span></span><br><span class="line">    <span class="comment">// 如果 UseRawPath 是 false，那么此选项是会直接生效的，因为会直接使用 url.Path ，也就是已经 unescape 了的</span></span><br><span class="line">UnescapePathValues <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Value of 'maxMemory' param that is given to http.Request's ParseMultipartForm</span></span><br><span class="line">    <span class="comment">// method call.</span></span><br><span class="line">    <span class="comment">// 赋予 http.Request 的 ParseMultipartForm 方法的 maxMemory 的值</span></span><br><span class="line">MaxMultipartMemory <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line">delims           render.Delims <span class="comment">// glob前后缀</span></span><br><span class="line">secureJsonPrefix <span class="keyword">string</span> <span class="comment">// 安全JSON前缀</span></span><br><span class="line">HTMLRender       render.HTMLRender <span class="comment">// HTML渲染器</span></span><br><span class="line">FuncMap          template.FuncMap</span><br><span class="line">allNoRoute       HandlersChain</span><br><span class="line">allNoMethod      HandlersChain</span><br><span class="line">noRoute          HandlersChain</span><br><span class="line">noMethod         HandlersChain</span><br><span class="line">pool             sync.Pool</span><br><span class="line">trees            methodTrees</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Gin学习笔记，阅读gin.go
    
    </summary>
    
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
      <category term="gin" scheme="https://adoontheway.gitee.io/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>Gin学习笔记 - Context</title>
    <link href="https://adoontheway.gitee.io/2020/09/01/gin-notes/"/>
    <id>https://adoontheway.gitee.io/2020/09/01/gin-notes/</id>
    <published>2020-09-01T03:42:29.000Z</published>
    <updated>2020-09-03T04:28:23.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>转型路很艰难，所以最近思考了一下，发现自己会的东西多，但是精通和深入的东西少。<br>后续转型只会更难。决定细心研读一款框架的代码，理解其核心会对后续大有裨益。<br><strong>golang</strong> 比较流行的 <strong><em>web</em></strong> 框架就那么几个：</p><ul><li>begoo</li><li>gin</li><li>httprouter：gin是基于此框架的</li></ul><p><strong>begoo</strong> 是国人的作品，但是之前了解过一下，比较重，所以选择轻量一些的 <strong>gin</strong> 作为研究对象。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><p>研究 <strong>gin</strong> 是从他的源代码根目录开始的，第一个文件是 <strong>auth.go</strong>，在 <strong>auth.go</strong> 的第一个 <strong><em>public</em></strong> 方法 <em>BasicAuthForRealm</em> 中看到了 <em>gin.Context</em> 的使用，于是导航到 <em>gin.Context</em> 看看</p><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p><strong>Context</strong> 是 <em>gin</em> 的核心之一。他是用来在中间件之间传递变量，管理流程，比如验证请求的 <strong>JSON</strong> 数据和渲染 <strong>JSON</strong> 响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">writermem responseWriter<span class="comment">//定义在reponse_wirter.go中，内嵌了http.ResponseWriter，有size和status属性</span></span><br><span class="line">Request   *http.Request<span class="comment">//当前http请求</span></span><br><span class="line">Writer    ResponseWriter<span class="comment">//使用gin封装的ResponseWriter，不是http.ResponseWriter</span></span><br><span class="line">Params   Params<span class="comment">//get请求中url携带的get参数，是一个k/v对，定义在tree.go中</span></span><br><span class="line">handlers HandlersChain<span class="comment">//中间件链，是一个[]HandlerFunc类型，定义在gin.go中，HandlerFunc类型定义是 func(*Context)</span></span><br><span class="line">index    <span class="keyword">int8</span><span class="comment">//索引，用于记录中间件的执行深度，当执行到abortIndex的时候不接着往下执行，在Context的Next方法中变更的</span></span><br><span class="line">engine *Engine<span class="comment">//gin框架的实例，包含了muxer，中间件和各种配置的设置，通过Engine.New()/Engine.Default()来创建</span></span><br><span class="line">Keys <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;<span class="comment">//context专门给每个请求提供的k/v对，通过Context的Get/Set相关方法来操作</span></span><br><span class="line">Errors errorMsgs<span class="comment">//这是一个[]*Error类型，此类型定义在errors.go中，提供给所有使用此Context的处理器/中间件来添加错误信息的</span></span><br><span class="line">Accepted []<span class="keyword">string</span><span class="comment">//用于定义所有可接受的格式，通过Context.SetAccepted方法来操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量部分"><a href="#常量部分" class="headerlink" title="常量部分"></a>常量部分</h3><p><strong>Context.go</strong> 的代码注释和逻辑分块做的非常好，他的代码是按照逻辑进行分块的。<br>第一部分肯定是常量定义，首先声明的几个变量都是来自 <code>gin-gonic/gin/binding</code>的；<br>接着是 <strong><em>abortIndex = math.MaxInt8/2</em></strong> 也就是最大中间件深度，也就是个数；  </p><h3 id="实例化相关部分"><a href="#实例化相关部分" class="headerlink" title="实例化相关部分"></a>实例化相关部分</h3><ul><li>reset: 私有方法，看名字就知道是重置 <strong>Context</strong></li><li>Copy: 看名字就知道是复制当前 <strong>Context</strong> ，复制的时候没有复制处理函数和中间件，以及 <strong>*writemem</strong> 的 <strong>ResponseWriter</strong>，因为如果全盘复制的话，会导致两个 <strong>Context</strong> 也就是两个请求共用一个处理链和响应用的 <strong>Writer</strong> ，会造成当前请求没法响应</li><li>HandlerName: 返回主处理函数的名字</li><li>Handler: 主处理函数，也就是 <strong>handlers.last</strong></li></ul><h3 id="流程控制部分"><a href="#流程控制部分" class="headerlink" title="流程控制部分"></a>流程控制部分</h3><ul><li>Next: 只能在中间件里调用，用于执行中间件链条中下一个中间件</li><li>IsAborted: 返回当前 <strong>Contexxt</strong> 是否已经中断，其实就是判断当前索引是否大于等于 <strong><em>abortIndex</em></strong></li><li>Abort: 强行中断当前 <strong>Context</strong> 的执行，也就是将当前的索引设置为 <strong><em>abortIndex</em></strong></li><li>AbortWithStatus: 调用 <code>Abort</code> 并将指定的状态码写入 <strong><em>header</em></strong>，例如，鉴权验证失败，立刻调用此方法并传入状态码401，也就是鉴权失败</li><li>AbortWithJSON: 先调用<code>Abort</code>但后调用<code>JSON</code>，也就是将错误信息以<strong>JSON</strong>的方式响应</li><li>AbortWithError: 先调用<code>AbortWithStatus</code>，然后将错误通过<code>Error</code>方法将错误信息推入<code>context.errors</code>中</li></ul><h3 id="错误管理部分"><a href="#错误管理部分" class="headerlink" title="错误管理部分"></a>错误管理部分</h3><ul><li>Error: 将错误附加到当前 <strong>Context</strong> 中，也就是将错误推入 <strong>Context</strong> 的 <strong><em>errors</em></strong> 中，解析请求的过程中遇到的错误都可以调用此方法处理，可以制作一个中间件搜集这些错误，然后将他们一起记录到数据库中，或打印日志，或添加到 <strong>http</strong> 响应中，需要注意的是如果传入的 <strong>error</strong> 是空的话会引发 <strong><em>panic</em></strong></li></ul><h3 id="元数据管理部分"><a href="#元数据管理部分" class="headerlink" title="元数据管理部分"></a>元数据管理部分</h3><p>也就是对于 <strong>Context</strong> 的 <strong><em>Keys</em></strong> 的操作接口，包括： <code>Set</code>,<code>Get</code>,<code>MustGet</code>,<code>GetString</code>,<code>GetBool</code>,<code>GetInt</code>,<code>GetInt64</code>,<code>GetFloat64</code>,<code>GetTime</code>,<code>GetDuration</code>,<code>GetStringSlice</code>,<code>GetStringMap</code>,<code>GetStringMapString</code>,<code>GetStringMapStringSlice</code></p><h3 id="输入数据部分"><a href="#输入数据部分" class="headerlink" title="输入数据部分"></a>输入数据部分</h3><p>也就是对<strong>URL</strong> <strong>Get</strong> 参数的处理  </p><ul><li>Param: 获取 <strong>Context.Params</strong> 中的数据</li><li>Query: 是<code>Context.Request.URL.Query().Get(key)</code>的快捷方式，获取 <strong><em>url</em></strong> 中的指定 <strong><em>key</em></strong> 的参数，不存在的话返回<code>&quot;&quot;</code></li><li>DefaultQuery: 和 <strong>Query</strong> 类似，不过查询不到的话就返回传入的默认值</li><li>GetQuery: 和 <strong>Query</strong> 类似，会返回查询是否成功</li><li>QueryArray: 与  <strong>GetQueryArray</strong> 都是查询指定 <strong><em>key</em></strong> 返回一个 <em>slice</em> ，不同的是 <strong>GetQueryArray</strong> 会返回查询成功与否</li><li>PostForm: 返回 <em>POST</em> 数据中的值，没有的话返回空字符串<code>(&quot;&quot;)</code></li><li>DefaultPostForm: 传入默认值的获取方法</li><li>GetPostForm: 和 <strong>PostForm</strong> 差不多，唯一不同的是会返回查询成功与否</li><li>PostFormArray: 获取 <em>POST</em> 数据中对应 <strong><em>key</em></strong> 的字符串数组, <strong>GetPostFormArray</strong> 和 <strong>PostFormArray</strong> 其实调用的就是这个方法，不过忽略了他的查询是否成功</li><li>FormFile: 返回对应表格 <em>key</em> 的第一个文件</li><li>MultipartForm: 是解析过的 <em>multipart form</em>，包括上传的文件</li><li>SaveUploadedFile: 将上上传的文件保存到指定位置</li><li>Bind: 用于检查 <strong><em>Content-Type</em></strong> 然后自动选择一个绑定的引擎，比如：<strong><em>application/json</em></strong> 对应的 <strong>JSON</strong> 绑定, <strong><em>application/xml</em></strong> 对应 ** xml** 绑定；绑定不了的话会返回错误。然后会将传入的数据解析到指定的结构体指针中。如果输入不合法的话会写入400错误然后设置 <strong><em>Content-Type</em></strong> 为 <strong>plain/text</strong></li><li>BindJSON: 是 <strong>MustBindWith(obj,binding.JSON)</strong> 的快捷方式</li><li>BindQuery: 是 <strong>MustBindWith(obj,bing.Query)</strong> 的快捷方式</li><li>MustBindWith: 必需使用指定的绑定引擎来绑定传入的结构体指针，遇到任何问题会立刻返回 <em>400</em> 的 <em>HTTP</em> 错误码来中断请求</li><li>ShouldBind: 与 <strong>Bind</strong> 功能一样，区别是此方法绑定的数据无效的时候不会推出也不会设置响应的错误为400</li><li>ShouldBindJSON: 是 <strong>ShouldBindWith(obj, binding.JSON)</strong> 的快捷方式</li><li>ShouldBindQuery: 是 <strong>ShouldBindWith(obj, binding.Query)</strong> 的快捷方式</li><li>ShouldBindWith: 使用指定的绑定引擎绑定传入的结构体指针</li><li>ClientIP: 使用最佳算法解析真实的客户端IP，通过解析 <strong>X-Real-IP</strong> 和 <strong>X-Forwarded-For</strong> 来与反转代理服务器，如 <em>nginix</em> ， <em>haproxy</em> ，有效合作，由于 <em>nginx</em> 使用 <strong>X-Real-IP</strong> 作为代理 <strong>IP</strong>，所以会优先使用 <em>X-Forwarded-IP</em></li><li>ContentType: 返回请求头里面的<code>Content-Type</code></li><li>IsWebsocket: 如果请求头里面有信息显示客户端已经发起来 <em>websocket</em> 握手请求，那么返回 <em>true</em></li><li>requestHeader: 私有方法，返回请求头里面的信息</li></ul><h3 id="响应渲染部分"><a href="#响应渲染部分" class="headerlink" title="响应渲染部分"></a>响应渲染部分</h3><ul><li>bodyAllowedForStatus: 是<strong>http.bodyAllowedForStatus</strong> 的不导出版本</li><li>Status: 设置响应状态码</li><li>Header: 添加或者设置响应头</li><li>GetHeader: 返回指定的响应头值</li><li>GetRawData: 返回响应体的流数据</li><li>SetCookie: 在响应头里添加一个 <strong>Set-Cookie</strong> 的头信息。提供的 <strong>cookie</strong> 必需有一个有效的名字，无效的名字会静默去掉。</li><li>Cookie: 返回请求里指定名字的 <strong>cookie</strong> ，找不到的时候返回 <strong>ErrNoCookie</strong> 。返回的 <strong>cookie</strong> 是 <em>unescaped</em> 。即使匹配到里多个 <em>cookie</em> ，最终他也只返回一个</li><li>Render: 使用指定的渲染器和状态码来渲染响应数据</li><li>HTML: <strong>HTMl</strong> 渲染指定文件名的 <strong>HTTP</strong> 模版，同时更新 <strong>HTTP</strong> 码，设置 <strong>Content-Type</strong> 为<code>text/html</code></li><li>IndentedJSON: 将提供的结构体序列化为美化的 <em>JSON</em> 到响应体中，他会同时将 <strong>Content-Type</strong> 设置为 <code>application/json</code>，官方在此警告，建议仅在开发中使用此功能，因为美化 <em>JSON</em> 会耗费更多的 <em>CPU</em>，传输过程中会耗费更多的带宽。 建议在生产环境中使用 <strong>Context.JSON()</strong></li><li>SecureJSON: 将给定的结构体序列化为安全的 <em>JSON</em> 响应体中。如果给定的结构体是数组，那么默认会使用 <code>while(1)</code>。同时他也会将 <em>Content-Type</em> 设置为 <code>application/json</code></li><li>JSON: 将给定的结构体序列化为 <em>JSON</em> 到响应体。同时将 <em>Content-Type</em> 设置为 <code>application/json</code></li><li>XML: 将给定的结构体序列化为 <em>XML</em> 到响应体。同时将 <em>Content-Type</em> 设置为 <code>application/xml</code></li><li>YAML: 将给定的结构体序列化为 <em>YAML</em> 到响应体</li><li>String: 将提供的字符串写入到响应体中</li><li>Redirect: 重定向</li><li>Data: 将数据写入响应流中，并更新 <strong>HTTP</strong> 码</li><li>File: 高效的将指定的文件写入到响应流中</li><li>SSEvent: 向响应流中写入一个 <strong>Server-Sent</strong> 事件</li><li>Stream: </li></ul><h3 id="内容协定"><a href="#内容协定" class="headerlink" title="内容协定"></a>内容协定</h3><p>此部分是关于 <strong>HTTP</strong> 接受内容的</p><h3 id="GOLANG-ORG-X-NET-CONTEXT"><a href="#GOLANG-ORG-X-NET-CONTEXT" class="headerlink" title="GOLANG.ORG/X/NET/CONTEXT"></a>GOLANG.ORG/X/NET/CONTEXT</h3><p>此部分是 <em>gin.Context</em> 实现 <code>golang.org/x/net/context</code> 相关接口的</p>]]></content>
    
    <summary type="html">
    
      开始研读 Gin 代码
    
    </summary>
    
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
      <category term="gin" scheme="https://adoontheway.gitee.io/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>自由职业日记001 - 第三日</title>
    <link href="https://adoontheway.gitee.io/2020/05/26/freelancer001/"/>
    <id>https://adoontheway.gitee.io/2020/05/26/freelancer001/</id>
    <published>2020-05-26T14:07:22.000Z</published>
    <updated>2020-08-26T06:16:59.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="Doing-Done"><a href="#Doing-Done" class="headerlink" title="Doing/Done"></a>Doing/Done</h2><ul><li>百度文库传了两份文档，看了下是否有路可行 - 调查完成</li><li><strong>egret</strong> 打包的<strong>native app</strong>中接入 <strong>admob</strong> - 折腾中</li><li>早上 <strong>github page</strong> 总算下载完成，晚上解决了一些配置和文件缺失的问题，已经可以跑起来了 - 完成</li></ul><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>在未能保证家庭基本生活条件之前，只能逐利而为。<br>最近在思考，自己专精什么，发现自己会的很多，从感情咨询到人生抉择，技术选型到具体难点攻克，似乎都会，但是无一专精；<br>若我年少有为不自卑，我会好好的选择自己喜欢的事情坚持下去，最起码，十年，二十年一定有所成就，不似现在这般境界；<br>这个是最近在看一些平台上的签约专家发现的，发现这个世界上的路有很多，选择一条坚持下去就可以了。  </p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他的忘记了，<br>以后 <strong>hexo</strong> 会在工作的时候一直开启，以便记录遇到的问题和自己的想法之类的，<br><strong>Notation</strong> 手机上无法和电脑上同步，因为一些众所周知的问题，手机上估计是要放弃 <strong>notation</strong> 了。</p>]]></content>
    
    <summary type="html">
    
      无业日记一则
    
    </summary>
    
    
      <category term="freelancer" scheme="https://adoontheway.gitee.io/tags/freelancer/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点013 - Colly</title>
    <link href="https://adoontheway.gitee.io/2020/01/11/everydayprogress013/"/>
    <id>https://adoontheway.gitee.io/2020/01/11/everydayprogress013/</id>
    <published>2020-01-11T12:33:51.000Z</published>
    <updated>2020-08-26T06:16:59.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>嗯，最近在看一些小说，然后想到之前看过 <strong>go</strong> 有 <strong>colly</strong> 的爬虫框架存在，于是就来试试。<br>反正自己一闲下来就发慌。  </p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><p>目前只是爬到小说列表然后存放到本地 <strong>mongo</strong> 中，然后通过页面的下一页按钮来翻页。<br>当前只爬了 <em>120秒</em> 的数据，也爬了几百条。  </p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="string">"github.com/gocolly/colly/debug"</span></span><br><span class="line"><span class="string">"github.com/zolamk/colly-mongo-storage/colly/mongo"</span></span><br><span class="line"><span class="string">"go.mongodb.org/mongo-driver/bson"</span></span><br><span class="line">mongo2 <span class="string">"go.mongodb.org/mongo-driver/mongo"</span></span><br><span class="line"><span class="string">"go.mongodb.org/mongo-driver/mongo/options"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="keyword">string</span> <span class="string">`json:"title"`</span></span><br><span class="line">Author <span class="keyword">string</span> <span class="string">`json:"author"`</span></span><br><span class="line">Tag <span class="keyword">string</span><span class="string">`json:"tag"`</span></span><br><span class="line">Hot <span class="keyword">string</span><span class="string">`json:"hot"`</span></span><br><span class="line">Chars <span class="keyword">string</span> <span class="string">`json:"chars"`</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ROOT_URL  = <span class="string">"http://xsw.xyz/shuku/"</span></span><br><span class="line">MONGO_URI = <span class="string">"mongodb://localhost:27017"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> coll *mongo2.Collection</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>  &#123;</span><br><span class="line">client, err := mongo2.NewClient(options.Client().ApplyURI(MONGO_URI))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">ctx,_ := context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</span><br><span class="line">err = client.Connect(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">coll = client.Database(<span class="string">"xsw"</span>).Collection(<span class="string">"book_list"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">c := colly.NewCollector(</span><br><span class="line">colly.Debugger(&amp;debug.LogDebugger&#123;&#125;),</span><br><span class="line">colly.AllowedDomains(<span class="string">"xsw.xyz"</span>),</span><br><span class="line">colly.CacheDir(<span class="string">"./xsw"</span>),</span><br><span class="line">colly.UserAgent(<span class="string">"xsw"</span>),</span><br><span class="line">colly.Async(<span class="literal">true</span>),</span><br><span class="line">)</span><br><span class="line">storage := &amp;mongo.Storage&#123;</span><br><span class="line">Database:<span class="string">"books_xsw"</span>,</span><br><span class="line">URI:MONGO_URI,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := c.SetStorage(storage); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">c.Limit(&amp;colly.LimitRule&#123;</span><br><span class="line">DomainGlob:<span class="string">"xsw.*,"</span>,</span><br><span class="line">Parallelism:<span class="number">2</span>,</span><br><span class="line">RandomDelay:<span class="number">3</span>*time.Second,</span><br><span class="line">&#125;)</span><br><span class="line">detailCollector := c.Clone()</span><br><span class="line">c.OnHTML(<span class="string">".container .mod .bd"</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"found list"</span>)</span><br><span class="line">e.ForEach(<span class="string">"ul .column-2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(_ <span class="keyword">int</span>, el *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">title := el.ChildText(<span class="string">".right .name"</span>)</span><br><span class="line">author := el.ChildText(<span class="string">".info .author"</span>)</span><br><span class="line">words := el.ChildText(<span class="string">".info .words"</span>)</span><br><span class="line">update := el.ChildText(<span class="string">".info font"</span>)</span><br><span class="line">ctx,_ := context.WithTimeout(context.Background(), <span class="number">3</span>*time.Second)</span><br><span class="line">_,err := coll.InsertOne(ctx,bson.M&#123;<span class="string">"title"</span>:title,<span class="string">"author"</span>:author,<span class="string">"words"</span>:words,<span class="string">"update"</span>:update&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">c.OnHTML(<span class="string">".nextPage"</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">e.Request.Visit(e.Attr(<span class="string">"href"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">c.OnError(<span class="function"><span class="keyword">func</span><span class="params">(response *colly.Response, e error)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Request URL"</span>,response.Request.URL,<span class="string">", failed with response:"</span>,response,<span class="string">"\nError:"</span>,e)</span><br><span class="line">&#125;)</span><br><span class="line">detailCollector.OnHTML(<span class="string">"div[mod block book-all-list]"</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">c.Visit(ROOT_URL)</span><br><span class="line">time.Sleep(<span class="number">120</span>*time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>主要是通过读取小说的书库的第一页，解析单页的小说列表中的内容，存入 <strong>mongo</strong> ，然后访问下一页。<br>需要注意的是页面元素的筛选需要去复习一遍 <strong>jquery</strong> 的 <strong>selector</strong> 。   </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://github.com/gocolly/colly/blob/master/cmd/colly/colly.go" rel="external nofollow noopener noreferrer" target="_blank">colly</a></li><li><a href="https://www.cnblogs.com/shanyou/archive/2011/07/11/2103422.html" rel="external nofollow noopener noreferrer" target="_blank">jQuery操作Select</a></li><li><a href="https://github.com/mongodb/mongo-go-driver" rel="external nofollow noopener noreferrer" target="_blank">mongo-go-driver</a></li><li><a href="http://go-colly.org/docs/examples" rel="external nofollow noopener noreferrer" target="_blank">go colly examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      利用colly爬取网站
    
    </summary>
    
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
      <category term="colly" scheme="https://adoontheway.gitee.io/tags/colly/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点012 - Locust 压测</title>
    <link href="https://adoontheway.gitee.io/2020/01/06/everydayprogress012/"/>
    <id>https://adoontheway.gitee.io/2020/01/06/everydayprogress012/</id>
    <published>2020-01-06T13:02:10.000Z</published>
    <updated>2020-08-26T06:16:59.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>今天遇到了自己曾经开发的模块压测崩溃的问题，所以打算利用前段时间认识的 Locust 来压测一下。<br>由于项目比较复杂，涉及到 Http 登录，之后链接 ws server，所以可能耗时会比较长。<br>今天已经完成了前期规划，http登录流程，用户管理。<br>但是还是需要取熟悉 Locust 的原理，暂且备份。</p><h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><p>TO BE CONTINUE….</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>]]></content>
    
    <summary type="html">
    
      今天遇到了ws模块压测崩溃的问题，打算利用Locust来压一下
    
    </summary>
    
    
      <category term="protobuf" scheme="https://adoontheway.gitee.io/tags/protobuf/"/>
    
      <category term="python" scheme="https://adoontheway.gitee.io/tags/python/"/>
    
      <category term="locust" scheme="https://adoontheway.gitee.io/tags/locust/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点011 - Samba在Centos与Windows之间共享文件</title>
    <link href="https://adoontheway.gitee.io/2020/01/06/everydayprogress011/"/>
    <id>https://adoontheway.gitee.io/2020/01/06/everydayprogress011/</id>
    <published>2020-01-06T06:30:14.000Z</published>
    <updated>2020-08-26T06:16:59.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>主机是 <strong>Windows 10</strong> , <strong>Linux</strong> 是 <strong>vmware</strong> 中的 <strong>Centos</strong>。</p><p>由于最近 <strong>VMWare</strong> 的剪切板共享经常出现问题，所以在考虑 <strong>linux</strong> 与 <strong>windows</strong> 之间的文件共享解决方案，很快就找到了 <strong>Samba</strong>。</p><h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><p>先确保防火墙装了没有，没有的话装一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure><h3 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h3><p>通过以下命令查看<strong>selinux</strong>状态，如果是<strong>Disable</strong>的话继续，如果不是的话禁用一下 <strong>selinux</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenforce</span><br></pre></td></tr></table></figure><h3 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h3><p>通过以下命令安装<strong>samba</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install samba samba-client samba-swat</span><br></pre></td></tr></table></figure><h3 id="samba-conf"><a href="#samba-conf" class="headerlink" title="samba.conf"></a>samba.conf</h3><p>通过以下命令添加共享配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p>新增的共享配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tmp]</span></span><br><span class="line">        path=/home/hehe/share</span><br><span class="line">        browseable=yes</span><br><span class="line">        writeable=yes</span><br><span class="line">        valid users = hehe</span><br></pre></td></tr></table></figure><h3 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h3><p>首先要保证以上<strong>valid user</strong>是一个 有效的系统账号，不是的话需要添加一下，我直接用的系统账号，所以不需要添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd <span class="built_in">test</span> -g 6000</span><br><span class="line">useradd <span class="built_in">test</span> -u 6000 -g 6000 -s /sbin/nologin -d /dev/null</span><br></pre></td></tr></table></figure><h3 id="添加-Samba-账号"><a href="#添加-Samba-账号" class="headerlink" title="添加 Samba 账号"></a>添加 Samba 账号</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a hehe</span><br></pre></td></tr></table></figure><p>通过以上命令添加 <strong>samba</strong> 账号和密码</p><h3 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h3><p>建立上面的共享文件夹，并设置好权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/hehe/share</span><br><span class="line">sudo chmod 777 /home/hehe/share</span><br></pre></td></tr></table></figure><h3 id="重启所有服务"><a href="#重启所有服务" class="headerlink" title="重启所有服务"></a>重启所有服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service smb restart </span><br><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><h2 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h2><ul><li><p><em>Win+E</em> 打开资源管理器</p></li><li><p>点击左上角的计算机</p></li><li><p>点击【<em>映射网络驱动器</em>】</p></li><li><p>在文件夹中输入：【\\linux ip\share】</p></li><li><p>点击完成</p></li><li><p>输入前面的 <strong>samba</strong> 账号和密码</p></li><li><p>完成</p></li></ul><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>此时，可以在 Windows 上看到共享的文件夹了。  </p><p><img data-src="./1.png" alt="效果图"></p><h1 id="Attentions"><a href="#Attentions" class="headerlink" title="Attentions"></a>Attentions</h1><ul><li><strong>Linux</strong>上操作基本上都要用 <strong>sudo</strong> 操作，不然会报其他的问题</li><li><strong>smbpasswd</strong> 添加用户需要是一个有效的系统用户</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://blog.csdn.net/u012322925/article/details/51388159" rel="external nofollow noopener noreferrer" target="_blank">CentOS下搭建samba服务器与Windows进行共享服务</a></li><li><a href="https://blog.csdn.net/minenamewj/article/details/17356703" rel="external nofollow noopener noreferrer" target="_blank">samba用户提示Failed to add entry for user</a></li></ul>]]></content>
    
    <summary type="html">
    
      利用 Samba 在 Centos 与 Windows 之间共享文件
    
    </summary>
    
    
      <category term="samba" scheme="https://adoontheway.gitee.io/tags/samba/"/>
    
      <category term="vmware" scheme="https://adoontheway.gitee.io/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>每天进步一点点010 - LeetCode 数组中间值</title>
    <link href="https://adoontheway.gitee.io/2020/01/02/everydayprogress010/"/>
    <id>https://adoontheway.gitee.io/2020/01/02/everydayprogress010/</id>
    <published>2020-01-02T12:08:12.000Z</published>
    <updated>2020-08-26T06:16:59.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>没有</p><h1 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h1><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/" rel="external nofollow noopener noreferrer" target="_blank">2个已排序数组的中间值</a></p><h2 id="2个排序数组的中间值"><a href="#2个排序数组的中间值" class="headerlink" title="2个排序数组的中间值"></a>2个排序数组的中间值</h2><p>两个长度分别为 <strong>m</strong> 和 <strong>n</strong> 的数组 <strong>nums1</strong> 和 <strong>nums2</strong><br>查找他们的数组中间值<br>时间复杂度不得超过 <em>O(log (m+n))</em><br><strong>m</strong> 和 <strong>n</strong> 不会同时为 <strong>0</strong></p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间值： 2.0</span></span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间值： (2 + 3)/2 = 2.5</span></span><br></pre></td></tr></table></figure><h2 id="提交方案"><a href="#提交方案" class="headerlink" title="提交方案"></a>提交方案</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">len1 := <span class="built_in">len</span>(nums1)</span><br><span class="line">len2 := <span class="built_in">len</span>(nums2)</span><br><span class="line"><span class="built_in">len</span> := len1 + len2</span><br><span class="line"><span class="keyword">var</span> index1 <span class="keyword">int</span> = len1/<span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> index2 <span class="keyword">int</span> = len2/<span class="number">2</span></span><br><span class="line">need0,need1 := <span class="number">-1</span>,<span class="number">-1</span></span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">float64</span> = <span class="number">0.0</span></span><br><span class="line">need0 = (<span class="built_in">len</span> - <span class="number">1</span>)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">need1 = need0 + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len1 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> need1 == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(nums2[need0])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">float64</span>(nums2[need0]+nums2[need1])*<span class="number">0.5</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> len2 == <span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">if</span> need1 == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(nums1[need0])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">float64</span>(nums1[need0]+nums1[need1])*<span class="number">0.5</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> nums1[index1] &lt;= nums2[index2] &#123;</span><br><span class="line"><span class="keyword">for</span> i := index1 + <span class="number">1</span>; i&lt; len1; i++ &#123;</span><br><span class="line">index1 = i</span><br><span class="line"><span class="keyword">if</span> nums1[index1] &gt;= nums2[index2] || index1 &gt; need0 + <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> nums1[index1] &gt; nums2[index2] &#123;</span><br><span class="line"><span class="keyword">for</span> i := index2 + <span class="number">1</span>; i &lt; len2; i++ &#123;</span><br><span class="line">index2 = i</span><br><span class="line"><span class="keyword">if</span> nums1[index1] &lt;= nums2[index2] || index2 &gt; need0 + <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(nums1[index1])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span> = index2+index1+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line"><span class="keyword">if</span> index1 &gt;= <span class="number">0</span> &amp;&amp; index2 &gt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums1[index1] &gt; nums2[index2] &#123;</span><br><span class="line"><span class="keyword">if</span> i == need0 || i == need1 &#123;</span><br><span class="line">result += <span class="keyword">float64</span>(nums1[index1])</span><br><span class="line"><span class="keyword">if</span> i == need0 &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index1--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i == need0 || i == need1 &#123;</span><br><span class="line">result += <span class="keyword">float64</span>(nums2[index2])</span><br><span class="line"><span class="keyword">if</span> i == need0 &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index2--</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> index1 &gt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> need0 &lt;= i &#123;</span><br><span class="line">result += <span class="keyword">float64</span>(nums1[need0])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> need1 &lt;= i &amp;&amp; need1 != <span class="number">-1</span> &#123;</span><br><span class="line">result += <span class="keyword">float64</span>(nums1[need1])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> need0 &lt;= i &#123;</span><br><span class="line">result += <span class="keyword">float64</span>(nums2[need0])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> need1 &lt;= i &amp;&amp; need1 != <span class="number">-1</span> &#123;</span><br><span class="line">result += <span class="keyword">float64</span>(nums2[need1])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> need1 != <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result*<span class="number">0.5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>根据2个数组的长度，计算需要获取总数据里面需要的目标索引<br>对比两个数组的中间值，迭代小的那一个，直到找到大于等于大的那一个的中间值或者大于等于目标索引值的长度</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><a href="https://leetcode.com/submissions/detail/290502554/" rel="external nofollow noopener noreferrer" target="_blank">submissions/detail/290502554/</a></p><h3 id="耗时"><a href="#耗时" class="headerlink" title="耗时"></a>耗时</h3><p><img data-src="./1.png" alt="耗时"></p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p><img data-src="./2.png" alt="内存"></p><h1 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h1><p>不满意，耗时输给了66%的人，内存还输给了20%的人，稍后参考下别人的做法。</p>]]></content>
    
    <summary type="html">
    
      最近心很方，需要专注起来做点东西充实一下自己
    
    </summary>
    
    
      <category term="go" scheme="https://adoontheway.gitee.io/tags/go/"/>
    
      <category term="leetcode" scheme="https://adoontheway.gitee.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
